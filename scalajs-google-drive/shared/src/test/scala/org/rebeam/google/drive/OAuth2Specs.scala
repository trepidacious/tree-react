package org.rebeam.google.drive

import org.scalatest._
import io.circe.parser._
import io.circe.parser.decode
import io.circe.syntax._
import org.rebeam.google.drive.OAuth2._


class OAuth2Specs extends FlatSpec with Matchers with EitherValues {

  /**
    * Hand-checked credentials based on exampleCredentialStoreJson
    */
  val exampleCredentialStore =
    CredentialStore(
      installed = Credentials(
        clientId = "gibberish.apps.googleusercontent.com",
        projectId = "filetest-123456789",
        authUri = "https://accounts.google.com/o/oauth2/auth",
        tokenUri = "https://www.googleapis.com/oauth2/v3/token",
        authProviderX509CertUrl = "https://www.googleapis.com/oauth2/v1/certs",
        clientSecret = "SOOPERSEKRIT",
        redirectUris = List("urn:ietf:wg:oauth:2.0:oob", "http://localhost")
      )
    )

  /**
    * Example json string for a credential store, reindented from one generated by Google Drive API V3 quick-start,
    * with secrets removed.
    */
  val exampleCredentialStoreJson =
    """
      | {
      |   "installed":{
      |     "client_id":"gibberish.apps.googleusercontent.com",
      |     "project_id":"filetest-123456789",
      |     "auth_uri":"https://accounts.google.com/o/oauth2/auth",
      |     "token_uri":"https://www.googleapis.com/oauth2/v3/token",
      |     "auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs",
      |     "client_secret":"SOOPERSEKRIT",
      |     "redirect_uris":[
      |       "urn:ietf:wg:oauth:2.0:oob",
      |       "http://localhost"
      |     ]
      |   }
      | }
    """.stripMargin

  "CredentialStore" should "decode example json" in {
    val credentialStore = decode[CredentialStore](exampleCredentialStoreJson)
    assert(credentialStore.right.value == exampleCredentialStore)
  }

  it should "encode example store" in {
    val credentialStoreJson = exampleCredentialStore.asJson
    val exampleJson = parse(exampleCredentialStoreJson)
    assert(exampleJson.right.value ==  credentialStoreJson)
  }

  "Token" should "deserialise example json" in {

  }
}