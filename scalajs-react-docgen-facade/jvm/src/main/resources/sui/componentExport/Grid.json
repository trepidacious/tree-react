{
  "description": "A grid is used to harmonize negative space in a layout.",
  "displayName": "Grid",
  "methods": [],
  "props": {
    "as": {
      "type": {
        "name": "custom",
        "raw": "customPropTypes.as"
      },
      "required": false,
      "description": "An element type to render as (string or function)."
    },
    "celled": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "enum",
            "value": [
              {
                "value": "'internally'",
                "computed": false
              }
            ]
          }
        ]
      },
      "required": false,
      "description": "A grid can have rows divided into cells."
    },
    "centered": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A grid can have its columns centered."
    },
    "children": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Primary content."
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Additional classes."
    },
    "columns": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "1",
            "computed": false
          },
          {
            "value": "2",
            "computed": false
          },
          {
            "value": "3",
            "computed": false
          },
          {
            "value": "4",
            "computed": false
          },
          {
            "value": "5",
            "computed": false
          },
          {
            "value": "6",
            "computed": false
          },
          {
            "value": "7",
            "computed": false
          },
          {
            "value": "8",
            "computed": false
          },
          {
            "value": "9",
            "computed": false
          },
          {
            "value": "10",
            "computed": false
          },
          {
            "value": "11",
            "computed": false
          },
          {
            "value": "12",
            "computed": false
          },
          {
            "value": "13",
            "computed": false
          },
          {
            "value": "14",
            "computed": false
          },
          {
            "value": "15",
            "computed": false
          },
          {
            "value": "16",
            "computed": false
          },
          {
            "value": "one",
            "computed": false
          },
          {
            "value": "two",
            "computed": false
          },
          {
            "value": "three",
            "computed": false
          },
          {
            "value": "four",
            "computed": false
          },
          {
            "value": "five",
            "computed": false
          },
          {
            "value": "six",
            "computed": false
          },
          {
            "value": "seven",
            "computed": false
          },
          {
            "value": "eight",
            "computed": false
          },
          {
            "value": "nine",
            "computed": false
          },
          {
            "value": "ten",
            "computed": false
          },
          {
            "value": "eleven",
            "computed": false
          },
          {
            "value": "twelve",
            "computed": false
          },
          {
            "value": "thirteen",
            "computed": false
          },
          {
            "value": "fourteen",
            "computed": false
          },
          {
            "value": "fifteen",
            "computed": false
          },
          {
            "value": "sixteen",
            "computed": false
          },
          {
            "value": "equal",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "Represents column count per row in Grid."
    },
    "container": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A grid can be combined with a container to use the available layout and alignment."
    },
    "divided": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "enum",
            "value": [
              {
                "value": "'vertically'",
                "computed": false
              }
            ]
          }
        ]
      },
      "required": false,
      "description": "A grid can have dividers between its columns."
    },
    "doubling": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A grid can double its column width on tablet and mobile sizes."
    },
    "inverted": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A grid's colors can be inverted."
    },
    "padded": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "enum",
            "value": [
              {
                "value": "'horizontally'",
                "computed": false
              },
              {
                "value": "'vertically'",
                "computed": false
              }
            ]
          }
        ]
      },
      "required": false,
      "description": "A grid can preserve its vertical and horizontal gutters on first and last columns."
    },
    "relaxed": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "enum",
            "value": [
              {
                "value": "'very'",
                "computed": false
              }
            ]
          }
        ]
      },
      "required": false,
      "description": "A grid can increase its gutters to allow for more negative space."
    },
    "reversed": {
      "type": {
        "name": "custom",
        "raw": "customPropTypes.multipleProp([\n  'computer',\n  'computer vertically',\n  'mobile',\n  'mobile vertically',\n  'tablet',\n  'tablet vertically',\n])"
      },
      "required": false,
      "description": "A grid can specify that its columns should reverse order at different device sizes."
    },
    "stackable": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A grid can have its columns stack on-top of each other after reaching mobile breakpoints."
    },
    "stretched": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A grid can stretch its contents to take up the entire grid height."
    },
    "textAlign": {
      "type": {
        "name": "enum",
        "computed": true,
        "value": [
          {
            "value": "left",
            "computed": false
          },
          {
            "value": "center",
            "computed": false
          },
          {
            "value": "right",
            "computed": false
          },
          {
            "value": "justified",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "A grid can specify its text alignment."
    },
    "verticalAlign": {
      "type": {
        "name": "enum",
        "computed": true,
        "value": [
          {
            "value": "bottom",
            "computed": false
          },
          {
            "value": "middle",
            "computed": false
          },
          {
            "value": "top",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "A grid can specify its vertical alignment to have all its columns vertically centered."
    }
  },
  "constructorName": "Grid",
  "type": "collection",
  "isParent": true,
  "isChild": false,
  "parentDisplayName": null,
  "subcomponentName": null,
  "subcomponents": [
    "GridColumn",
    "GridRow"
  ],
  "apiPath": "Grid",
  "componentClassName": "grid",
  "docblock": {
    "tags": [],
    "description": [
      "A grid is used to harmonize negative space in a layout."
    ]
  },
  "examplesExist": true,
  "repoPath": "src/collections/Grid/Grid.js",
  "filename": "Grid.js",
  "filenameWithoutExt": "Grid"
}