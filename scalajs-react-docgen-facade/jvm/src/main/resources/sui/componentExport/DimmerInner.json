{
  "description": "An inner element for a Dimmer.",
  "displayName": "DimmerInner",
  "methods": [
    {
      "name": "handleClick",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "e",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "toggleStyles",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "active",
          "type": null
        }
      ],
      "returns": null
    }
  ],
  "props": {
    "as": {
      "type": {
        "name": "custom",
        "raw": "customPropTypes.as"
      },
      "required": false,
      "description": "An element type to render as (string or function)."
    },
    "active": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "An active dimmer will dim its parent container."
    },
    "children": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Primary content."
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Additional classes."
    },
    "content": {
      "type": {
        "name": "custom",
        "raw": "customPropTypes.contentShorthand"
      },
      "required": false,
      "description": "Shorthand for primary content."
    },
    "disabled": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A disabled dimmer cannot be activated"
    },
    "onClick": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Called on click.\n\n@param {SyntheticEvent} event - React's original SyntheticEvent.\n@param {object} data - All props."
    },
    "onClickOutside": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Handles click outside Dimmer's content, but inside Dimmer area.\n\n@param {SyntheticEvent} event - React's original SyntheticEvent.\n@param {object} data - All props."
    },
    "inverted": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A dimmer can be formatted to have its colors inverted."
    },
    "page": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A dimmer can be formatted to be fixed to the page."
    },
    "simple": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A dimmer can be controlled with simple prop."
    },
    "verticalAlign": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "bottom",
            "computed": false
          },
          {
            "value": "top",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "A dimmer can have its content top or bottom aligned."
    }
  },
  "constructorName": "DimmerInner",
  "type": "module",
  "isParent": false,
  "isChild": true,
  "parentDisplayName": "Dimmer",
  "subcomponentName": "Inner",
  "subcomponents": null,
  "apiPath": "Dimmer.Inner",
  "componentClassName": "inner",
  "docblock": {
    "tags": [],
    "description": [
      "An inner element for a Dimmer."
    ]
  },
  "examplesExist": false,
  "repoPath": "src/modules/Dimmer/DimmerInner.js",
  "filename": "DimmerInner.js",
  "filenameWithoutExt": "DimmerInner"
}