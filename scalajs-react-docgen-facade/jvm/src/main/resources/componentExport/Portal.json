{
  "description": "A component that allows you to render children outside their parent.\n@see Modal\n@see Popup\n@see Dimmer\n@see Confirm",
  "displayName": "Portal",
  "methods": [
    {
      "name": "handleDocumentMouseDown",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "e",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "handleDocumentClick",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "e",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "handleEscape",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "e",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "handlePortalMouseLeave",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "e",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "handlePortalMouseEnter",
      "docblock": null,
      "modifiers": [],
      "params": [],
      "returns": null
    },
    {
      "name": "handleTriggerBlur",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "e",
          "type": null
        },
        {
          "name": "...rest",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "handleTriggerClick",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "e",
          "type": null
        },
        {
          "name": "...rest",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "handleTriggerFocus",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "e",
          "type": null
        },
        {
          "name": "...rest",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "handleTriggerMouseLeave",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "e",
          "type": null
        },
        {
          "name": "...rest",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "handleTriggerMouseEnter",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "e",
          "type": null
        },
        {
          "name": "...rest",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "open",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "e",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "openWithTimeout",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "e",
          "type": null
        },
        {
          "name": "delay",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "close",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "e",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "closeWithTimeout",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "e",
          "type": null
        },
        {
          "name": "delay",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "handleMount",
      "docblock": null,
      "modifiers": [],
      "params": [],
      "returns": null
    },
    {
      "name": "handleUnmount",
      "docblock": null,
      "modifiers": [],
      "params": [],
      "returns": null
    },
    {
      "name": "handleTriggerRef",
      "docblock": null,
      "modifiers": [],
      "params": [
        {
          "name": "c",
          "type": null
        }
      ],
      "returns": null
    }
  ],
  "props": {
    "children": {
      "type": {
        "name": "node"
      },
      "required": true,
      "description": "Primary content."
    },
    "closeOnDocumentClick": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Controls whether or not the portal should close when the document is clicked.",
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "closeOnEscape": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Controls whether or not the portal should close when escape is pressed is displayed.",
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "closeOnPortalMouseLeave": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Controls whether or not the portal should close when mousing out of the portal.\nNOTE: This will prevent `closeOnTriggerMouseLeave` when mousing over the\ngap from the trigger to the portal."
    },
    "closeOnTriggerBlur": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Controls whether or not the portal should close on blur of the trigger."
    },
    "closeOnTriggerClick": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Controls whether or not the portal should close on click of the trigger."
    },
    "closeOnTriggerMouseLeave": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Controls whether or not the portal should close when mousing out of the trigger."
    },
    "defaultOpen": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Initial value of open."
    },
    "eventPool": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Event pool namespace that is used to handle component events",
      "defaultValue": {
        "value": "'default'",
        "computed": false
      }
    },
    "mountNode": {
      "type": {
        "name": "any"
      },
      "required": false,
      "description": "The node where the portal should mount."
    },
    "mouseEnterDelay": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Milliseconds to wait before opening on mouse over"
    },
    "mouseLeaveDelay": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Milliseconds to wait before closing on mouse leave"
    },
    "onClose": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Called when a close event happens\n\n@param {SyntheticEvent} event - React's original SyntheticEvent.\n@param {object} data - All props."
    },
    "onMount": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Called when the portal is mounted on the DOM.\n\n@param {null}\n@param {object} data - All props."
    },
    "onOpen": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Called when an open event happens\n\n@param {SyntheticEvent} event - React's original SyntheticEvent.\n@param {object} data - All props."
    },
    "onUnmount": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Called when the portal is unmounted from the DOM.\n\n@param {null}\n@param {object} data - All props."
    },
    "open": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Controls whether or not the portal is displayed."
    },
    "openOnTriggerClick": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Controls whether or not the portal should open when the trigger is clicked.",
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "openOnTriggerFocus": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Controls whether or not the portal should open on focus of the trigger."
    },
    "openOnTriggerMouseEnter": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Controls whether or not the portal should open when mousing over the trigger."
    },
    "trigger": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Element to be rendered in-place where the portal is defined."
    },
    "triggerRef": {
      "type": {
        "name": "custom",
        "raw": "customPropTypes.ref"
      },
      "required": false,
      "description": "Called with a ref to the trigger node."
    }
  },
  "constructorName": "Portal",
  "type": "addon",
  "isParent": true,
  "isChild": false,
  "parentDisplayName": null,
  "subcomponentName": null,
  "subcomponents": [
    "PortalInner"
  ],
  "apiPath": "Portal",
  "componentClassName": "portal",
  "docblock": {
    "tags": [
      {
        "title": "see",
        "description": "Modal"
      },
      {
        "title": "see",
        "description": "Popup"
      },
      {
        "title": "see",
        "description": "Dimmer"
      },
      {
        "title": "see",
        "description": "Confirm"
      }
    ],
    "description": [
      "A component that allows you to render children outside their parent."
    ]
  },
  "examplesExist": true,
  "repoPath": "src/addons/Portal/Portal.js",
  "filename": "Portal.js",
  "filenameWithoutExt": "Portal"
}