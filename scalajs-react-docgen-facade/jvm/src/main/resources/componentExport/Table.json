{
  "description": "A table displays a collections of data grouped into rows.",
  "displayName": "Table",
  "methods": [],
  "props": {
    "as": {
      "type": {
        "name": "custom",
        "raw": "customPropTypes.as"
      },
      "required": false,
      "description": "An element type to render as (string or function).",
      "defaultValue": {
        "value": "'table'",
        "computed": false
      }
    },
    "attached": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "enum",
            "value": [
              {
                "value": "'top'",
                "computed": false
              },
              {
                "value": "'bottom'",
                "computed": false
              }
            ]
          }
        ]
      },
      "required": false,
      "description": "Attach table to other content"
    },
    "basic": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "enum",
            "value": [
              {
                "value": "'very'",
                "computed": false
              }
            ]
          },
          {
            "name": "bool"
          }
        ]
      },
      "required": false,
      "description": "A table can reduce its complexity to increase readability."
    },
    "celled": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A table may be divided each row into separate cells."
    },
    "children": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Primary content."
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Additional classes."
    },
    "collapsing": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A table can be collapsing, taking up only as much space as its rows."
    },
    "color": {
      "type": {
        "name": "enum",
        "computed": true,
        "value": [
          {
            "value": "red",
            "computed": false
          },
          {
            "value": "orange",
            "computed": false
          },
          {
            "value": "yellow",
            "computed": false
          },
          {
            "value": "olive",
            "computed": false
          },
          {
            "value": "green",
            "computed": false
          },
          {
            "value": "teal",
            "computed": false
          },
          {
            "value": "blue",
            "computed": false
          },
          {
            "value": "violet",
            "computed": false
          },
          {
            "value": "purple",
            "computed": false
          },
          {
            "value": "pink",
            "computed": false
          },
          {
            "value": "brown",
            "computed": false
          },
          {
            "value": "grey",
            "computed": false
          },
          {
            "value": "black",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "A table can be given a color to distinguish it from other tables."
    },
    "columns": {
      "type": {
        "name": "enum",
        "computed": true,
        "value": [
          {
            "value": "1",
            "computed": false
          },
          {
            "value": "2",
            "computed": false
          },
          {
            "value": "3",
            "computed": false
          },
          {
            "value": "4",
            "computed": false
          },
          {
            "value": "5",
            "computed": false
          },
          {
            "value": "6",
            "computed": false
          },
          {
            "value": "7",
            "computed": false
          },
          {
            "value": "8",
            "computed": false
          },
          {
            "value": "9",
            "computed": false
          },
          {
            "value": "10",
            "computed": false
          },
          {
            "value": "11",
            "computed": false
          },
          {
            "value": "12",
            "computed": false
          },
          {
            "value": "13",
            "computed": false
          },
          {
            "value": "14",
            "computed": false
          },
          {
            "value": "15",
            "computed": false
          },
          {
            "value": "16",
            "computed": false
          },
          {
            "value": "one",
            "computed": false
          },
          {
            "value": "two",
            "computed": false
          },
          {
            "value": "three",
            "computed": false
          },
          {
            "value": "four",
            "computed": false
          },
          {
            "value": "five",
            "computed": false
          },
          {
            "value": "six",
            "computed": false
          },
          {
            "value": "seven",
            "computed": false
          },
          {
            "value": "eight",
            "computed": false
          },
          {
            "value": "nine",
            "computed": false
          },
          {
            "value": "ten",
            "computed": false
          },
          {
            "value": "eleven",
            "computed": false
          },
          {
            "value": "twelve",
            "computed": false
          },
          {
            "value": "thirteen",
            "computed": false
          },
          {
            "value": "fourteen",
            "computed": false
          },
          {
            "value": "fifteen",
            "computed": false
          },
          {
            "value": "sixteen",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "A table can specify its column count to divide its content evenly."
    },
    "compact": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "enum",
            "value": [
              {
                "value": "'very'",
                "computed": false
              }
            ]
          }
        ]
      },
      "required": false,
      "description": "A table may sometimes need to be more compact to make more rows visible at a time."
    },
    "definition": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A table may be formatted to emphasize a first column that defines a rows content."
    },
    "fixed": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A table can use fixed a special faster form of table rendering that does not resize table cells based on content"
    },
    "footerRow": {
      "type": {
        "name": "custom",
        "raw": "customPropTypes.itemShorthand"
      },
      "required": false,
      "description": "Shorthand for a TableRow to be placed within Table.Footer."
    },
    "headerRow": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "custom",
            "raw": "customPropTypes.itemShorthand"
          }
        ]
      },
      "required": false,
      "description": "Shorthand for a TableRow to be placed within Table.Header."
    },
    "headerRows": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "custom",
            "raw": "customPropTypes.collectionShorthand"
          }
        ]
      },
      "required": false,
      "description": "Shorthand for multiple TableRows to be placed within Table.Header."
    },
    "inverted": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A table's colors can be inverted."
    },
    "padded": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "enum",
            "value": [
              {
                "value": "'very'",
                "computed": false
              }
            ]
          }
        ]
      },
      "required": false,
      "description": "A table may sometimes need to be more padded for legibility."
    },
    "renderBodyRow": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.\n\n@param {*} data - An element in the `tableData` array.\n@param {number} index - The index of the current element in `tableData`.\n@returns {*} Shorthand for a Table.Row."
    },
    "selectable": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A table can have its rows appear selectable."
    },
    "singleLine": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A table can specify that its cell contents should remain on a single line and not wrap."
    },
    "size": {
      "type": {
        "name": "enum",
        "computed": true,
        "value": [
          {
            "value": "small",
            "computed": false
          },
          {
            "value": "large",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "A table can also be small or large."
    },
    "sortable": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A table may allow a user to sort contents by clicking on a table header."
    },
    "stackable": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A table can specify how it stacks table content responsively."
    },
    "striped": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A table can stripe alternate rows of content with a darker color to increase contrast."
    },
    "structured": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A table can be formatted to display complex structured data."
    },
    "tableData": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "array"
          }
        ]
      },
      "required": false,
      "description": "Data to be passed to the renderBodyRow function."
    },
    "textAlign": {
      "type": {
        "name": "enum",
        "computed": true,
        "value": [
          {
            "value": "left",
            "computed": false
          },
          {
            "value": "center",
            "computed": false
          },
          {
            "value": "right",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "A table can adjust its text alignment."
    },
    "unstackable": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "A table can specify how it stacks table content responsively."
    },
    "verticalAlign": {
      "type": {
        "name": "enum",
        "computed": true,
        "value": [
          {
            "value": "bottom",
            "computed": false
          },
          {
            "value": "middle",
            "computed": false
          },
          {
            "value": "top",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "A table can adjust its text alignment."
    }
  },
  "constructorName": "Table",
  "type": "collection",
  "isParent": true,
  "isChild": false,
  "parentDisplayName": null,
  "subcomponentName": null,
  "subcomponents": [
    "TableBody",
    "TableCell",
    "TableFooter",
    "TableHeader",
    "TableHeaderCell",
    "TableRow"
  ],
  "apiPath": "Table",
  "componentClassName": "table",
  "docblock": {
    "tags": [],
    "description": [
      "A table displays a collections of data grouped into rows."
    ]
  },
  "examplesExist": true,
  "repoPath": "src/collections/Table/Table.js",
  "filename": "Table.js",
  "filenameWithoutExt": "Table"
}