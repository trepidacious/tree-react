{
  "packages\\material-ui\\src\\AppBar\\AppBar.js": {
    "description": "",
    "displayName": "AppBar",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'fixed'",
              "computed": false
            },
            {
              "value": "'absolute'",
              "computed": false
            },
            {
              "value": "'sticky'",
              "computed": false
            },
            {
              "value": "'static'",
              "computed": false
            },
            {
              "value": "'relative'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The positioning type. The behavior of the different options is described\r\n[here](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).\r\nNote: `sticky` is not universally supported and will fall back to `static` when unavailable.",
        "defaultValue": {
          "value": "'fixed'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Avatar\\Avatar.js": {
    "description": "",
    "displayName": "Avatar",
    "methods": [],
    "props": {
      "alt": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Used in combination with `src` or `srcSet` to\r\nprovide an alt attribute for the rendered `img` element."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Used to render icon or text elements inside the Avatar.\r\n`src` and `alt` props will not be used and no `img` will\r\nbe rendered by default.\r\n\nThis can be an element, or just a string."
      },
      "childrenClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore\r\nThe className of the child element.\r\nUsed by Chip and ListItemIcon to style the Avatar icon."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "imgProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Attributes applied to the `img` element if the component\r\nis used to display an image."
      },
      "sizes": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `sizes` attribute for the `img` element."
      },
      "src": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `src` attribute for the `img` element."
      },
      "srcSet": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `srcSet` attribute for the `img` element."
      }
    }
  },
  "packages\\material-ui\\src\\Backdrop\\Backdrop.js": {
    "description": "",
    "displayName": "Backdrop",
    "methods": [],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "invisible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the backdrop is invisible.\r\nIt can be used when rendering a popover or a custom select component.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "If `true`, the backdrop is open."
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\r\nYou may specify a single timeout for all transitions, or individually with an object."
      }
    }
  },
  "packages\\material-ui\\src\\Badge\\Badge.js": {
    "description": "",
    "displayName": "Badge",
    "methods": [],
    "props": {
      "badgeContent": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content rendered within the badge."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The badge will be added relative to this node."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'span'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\BottomNavigation\\BottomNavigation.js": {
    "description": "",
    "displayName": "BottomNavigation",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the value changes.\r\n\n@param {object} event The event source of the callback\r\n@param {any} value We default to the index of the child"
      },
      "showLabels": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, all `BottomNavigationAction`s will show their labels.\r\nBy default, only the selected `BottomNavigationAction` will show its label.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The value of the currently selected `BottomNavigationAction`."
      }
    }
  },
  "packages\\material-ui\\src\\BottomNavigationAction\\BottomNavigationAction.js": {
    "description": "",
    "displayName": "BottomNavigationAction",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "custom",
          "raw": "unsupportedProp"
        },
        "required": false,
        "description": "This property isn't supported.\r\nUse the `component` property if you need to change the children structure."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon element."
      },
      "label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The label element."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "showLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `BottomNavigationAction` will show its label.\r\nBy default, only the selected `BottomNavigationAction`\r\ninside `BottomNavigation` will show its label."
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "You can provide your own value. Otherwise, we fallback to the child position index."
      }
    }
  },
  "packages\\material-ui\\src\\Button\\Button.js": {
    "description": "",
    "displayName": "Button",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the button."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the button will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableFocusRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the  keyboard focus ripple will be disabled.\r\n`disableRipple` must also be true.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple effect will be disabled."
      },
      "focusVisibleClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the button will take up the full width of its container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The URL to link to when the button is clicked.\r\nIf defined, an `a` element will be used as the root node."
      },
      "mini": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, and `variant` is `'fab'`, will use mini floating action button styling.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The size of the button.\r\n`small` is equivalent to the dense button styling.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'text'",
              "computed": false
            },
            {
              "value": "'flat'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'contained'",
              "computed": false
            },
            {
              "value": "'raised'",
              "computed": false
            },
            {
              "value": "'fab'",
              "computed": false
            },
            {
              "value": "'extendedFab'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use. __WARNING__: `flat` and `raised` are deprecated. Instead use\r\n`text` and `contained` respectively.",
        "defaultValue": {
          "value": "'text'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\ButtonBase\\ButtonBase.js": {
    "description": "`ButtonBase` contains as few styles as possible.\r\nIt aims to be a simple building block for creating a button.\r\nIt contains a load of style reset and some focus/ripple logic.",
    "displayName": "ButtonBase",
    "methods": [
      {
        "name": "onRippleRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onFocusVisibleHandler",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getDerivedStateFromProps",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "nextProps",
            "type": null
          },
          {
            "name": "prevState",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleKeyUp",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleFocus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "action": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component mounts.\r\nThis is useful when you want to trigger an action programmatically.\r\nIt currently only supports `focusVisible()` action.\r\n\n@param {object} actions This object contains all possible actions\r\nthat can be triggered programmatically."
      },
      "buttonRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Use that property to pass a ref callback to the native button component."
      },
      "centerRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripples will be centered.\r\nThey won't start at the cursor interaction position.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the base button will be disabled."
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple effect will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableTouchRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the touch ripple effect will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "focusRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the base button will have a keyboard focus ripple.\r\n`disableRipple` must also be `false`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "focusVisibleClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "This property can help a person know which element has the keyboard focus.\r\nThe class name will be applied when the element gain the focus through a keyboard interaction.\r\nIt's a polyfill for the [CSS :focus-visible feature](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\r\nThe rational for using this feature [is explain here](https://github.com/WICG/focus-visible/blob/master/explainer.md)."
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onFocus": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onFocusVisible": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component is focused with a keyboard.\r\nWe trigger a `onFocus` callback too."
      },
      "onKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onKeyUp": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onMouseDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onMouseLeave": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onMouseUp": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onTouchEnd": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onTouchMove": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onTouchStart": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "tabIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "'0'",
          "computed": false
        }
      },
      "TouchRippleProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `TouchRipple` element."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Used to control the button's purpose.\r\nThis property passes the value to the `type` attribute of the native button component.\r\nValid property values include `button`, `submit`, and `reset`.",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\ButtonBase\\Ripple.js": {
    "description": "@ignore - internal component.",
    "displayName": "Ripple",
    "methods": [
      {
        "name": "handleEnter",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleExit",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "pulsate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "rippleSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Diameter of the ripple."
      },
      "rippleX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Horizontal position of the ripple center."
      },
      "rippleY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Vertical position of the ripple center."
      }
    }
  },
  "packages\\material-ui\\src\\ButtonBase\\TouchRipple.js": {
    "description": "",
    "displayName": "TouchRipple",
    "methods": [
      {
        "name": "pulsate",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "start",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          },
          {
            "name": "options",
            "type": null
          },
          {
            "name": "cb",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "startCommit",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "params",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "stop",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          },
          {
            "name": "cb",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "center": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple starts at the center of the component\r\nrather than at the point of interaction.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\Card\\Card.js": {
    "description": "",
    "displayName": "Card",
    "methods": [],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "raised": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the card will use raised styling.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\CardActionArea\\CardActionArea.js": {
    "description": "",
    "displayName": "CardActionArea",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "focusVisibleClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\CardActions\\CardActions.js": {
    "description": "",
    "displayName": "CardActions",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableActionSpacing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the card actions do not have additional margin.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\CardContent\\CardContent.js": {
    "description": "",
    "displayName": "CardContent",
    "methods": [],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\CardHeader\\CardHeader.js": {
    "description": "",
    "displayName": "CardHeader",
    "methods": [],
    "props": {
      "action": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The action to display in the card header."
      },
      "avatar": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The Avatar for the Card Header."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "disableTypography": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the children won't be wrapped by a Typography component.\r\nThis can be useful to render an alternative Typography variant by wrapping\r\nthe `title` text, and optional `subheader` text\r\nwith the Typography component.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "subheader": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "subheaderTypographyProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "These props will be forwarded to the subheader\r\n(as long as disableTypography is not `true`)."
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the Card Title."
      },
      "titleTypographyProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "These props will be forwarded to the title\r\n(as long as disableTypography is not `true`)."
      }
    }
  },
  "packages\\material-ui\\src\\CardMedia\\CardMedia.js": {
    "description": "",
    "displayName": "CardMedia",
    "methods": [],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Component for rendering image.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "image": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Image to be displayed as a background image.\r\nEither `image` or `src` prop must be specified.\r\nNote that caller must specify height otherwise the image will not be visible."
      },
      "src": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "An alias for `image` property.\r\nAvailable only with media components.\r\nMedia components: `video`, `audio`, `picture`, `iframe`, `img`."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\Checkbox\\Checkbox.js": {
    "description": "",
    "displayName": "Checkbox",
    "methods": [],
    "props": {
      "checked": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "If `true`, the component is checked."
      },
      "checkedIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display when the component is checked.",
        "defaultValue": {
          "value": "<CheckBoxIcon />",
          "computed": false
        }
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'secondary'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the switch will be disabled."
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple effect will be disabled."
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display when the component is unchecked.",
        "defaultValue": {
          "value": "<CheckBoxOutlineBlankIcon />",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element."
      },
      "indeterminate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component appears indeterminate.\r\nThis does not set the native input element to indeterminate due\r\nto inconsistent behavior across browsers.\r\nHowever, we set a `data-indeterminate` attribute on the input.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "indeterminateIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display when the component is indeterminate.",
        "defaultValue": {
          "value": "<IndeterminateCheckBoxIcon />",
          "computed": false
        }
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Use that property to pass a ref callback to the native input component."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the state is changed.\r\n\n@param {object} event The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.checked`.\r\n@param {boolean} checked The `checked` value of the switch"
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The input component property `type`."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value of the component."
      }
    }
  },
  "packages\\material-ui\\src\\Chip\\Chip.js": {
    "description": "Chips represent complex entities in small blocks, such as a contact.",
    "displayName": "Chip",
    "methods": [
      {
        "name": "handleDeleteIconClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleKeyUp",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "avatar": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "Avatar element."
      },
      "children": {
        "type": {
          "name": "custom",
          "raw": "unsupportedProp"
        },
        "required": false,
        "description": "This property isn't supported.\r\nUse the `component` property if you need to change the children structure."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "clickable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the chip will appear clickable, and will raise when pressed,\r\neven if the onClick property is not defined. This can be used, for example,\r\nalong with the component property to indicate an anchor Chip is clickable.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "deleteIcon": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "Override the default delete icon element. Shown only if `onDelete` is set."
      },
      "icon": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "Icon element."
      },
      "label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the label."
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onDelete": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function fired when the delete icon is clicked.\r\nIf set, the delete icon will be shown."
      },
      "onKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onKeyUp": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "tabIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "@ignore"
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\CircularProgress\\CircularProgress.js": {
    "description": "## ARIA\r\n\nIf the progress bar is describing the loading progress of a particular region of a page,\r\nyou should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\r\nattribute to `true` on that region until it has finished loading.",
    "displayName": "CircularProgress",
    "methods": [],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The size of the circle.",
        "defaultValue": {
          "value": "40",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "thickness": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The thickness of the circle.",
        "defaultValue": {
          "value": "3.6",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The value of the progress indicator for the determinate and static variants.\r\nValue between 0 and 100.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'determinate'",
              "computed": false
            },
            {
              "value": "'indeterminate'",
              "computed": false
            },
            {
              "value": "'static'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.\r\nUse indeterminate when there is no progress value.",
        "defaultValue": {
          "value": "'indeterminate'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\ClickAwayListener\\ClickAwayListener.js": {
    "description": "Listen for click events that occur somewhere in the document, outside of the element itself.\r\nFor instance, if you need to hide a menu when people click anywhere else on your page.",
    "displayName": "ClickAwayListener",
    "methods": [
      {
        "name": "handleClickAway",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "element"
        },
        "required": true,
        "description": "The wrapped element."
      },
      "mouseEvent": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'onClick'",
              "computed": false
            },
            {
              "value": "'onMouseDown'",
              "computed": false
            },
            {
              "value": "'onMouseUp'",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The mouse event to listen to. You can disable the listener by providing `false`.",
        "defaultValue": {
          "value": "'onMouseUp'",
          "computed": false
        }
      },
      "onClickAway": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Callback fired when a \"click away\" event is detected."
      },
      "touchEvent": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'onTouchStart'",
              "computed": false
            },
            {
              "value": "'onTouchEnd'",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The touch event to listen to. You can disable the listener by providing `false`.",
        "defaultValue": {
          "value": "'onTouchEnd'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Collapse\\Collapse.js": {
    "description": "The Collapse transition is used by the\r\n[Vertical Stepper](/demos/steppers/#vertical-stepper) StepContent component.\r\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
    "displayName": "Collapse",
    "methods": [
      {
        "name": "handleEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleEntering",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleEntered",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleExit",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleExiting",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "addEndListener",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "_",
            "type": null
          },
          {
            "name": "next",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content node to be collapsed."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "collapsedHeight": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The height of the container when collapsed.",
        "defaultValue": {
          "value": "'0px'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "in": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will transition in."
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "timeout": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "'auto'",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\r\nYou may specify a single timeout for all transitions, or individually with an object.\r\n\nSet to 'auto' to automatically calculate transition time based on height.",
        "defaultValue": {
          "value": "duration.standard",
          "computed": true
        }
      }
    }
  },
  "packages\\material-ui\\src\\CssBaseline\\CssBaseline.js": {
    "description": "Kickstart an elegant, consistent, and simple baseline to build upon.",
    "displayName": "CssBaseline",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "You can wrap a node.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\Dialog\\Dialog.js": {
    "description": "Dialogs are overlaid modal paper based components with a backdrop.",
    "displayName": "Dialog",
    "methods": [],
    "props": {
      "BackdropProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Dialog children, usually the included sub-components."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableBackdropClick": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, clicking the backdrop will not fire the `onClose` callback.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableEscapeKeyDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, hitting escape will not fire the `onClose` callback.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fullScreen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the dialog will be full-screen",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the dialog stretches to `maxWidth`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "maxWidth": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'xs'",
              "computed": false
            },
            {
              "value": "'sm'",
              "computed": false
            },
            {
              "value": "'md'",
              "computed": false
            },
            {
              "value": "'lg'",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determine the max width of the dialog.\r\nThe dialog width grows with the size of the screen, this property is useful\r\non the desktop where you might need some coherent different width size across your\r\napplication. Set to `false` to disable `maxWidth`.",
        "defaultValue": {
          "value": "'sm'",
          "computed": false
        }
      },
      "onBackdropClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the backdrop is clicked."
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be closed.\r\n\n@param {object} event The event source of the callback"
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the dialog enters."
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the dialog has entered."
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the dialog is entering."
      },
      "onEscapeKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the escape key is pressed,\r\n`disableKeyboard` is false and the modal is in focus."
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the dialog exits."
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the dialog has exited."
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the dialog is exiting."
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "If `true`, the Dialog is open."
      },
      "PaperProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Paper`](/api/paper/) element."
      },
      "scroll": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'body'",
              "computed": false
            },
            {
              "value": "'paper'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determine the container for scrolling the dialog.",
        "defaultValue": {
          "value": "'paper'",
          "computed": false
        }
      },
      "TransitionComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Transition component.",
        "defaultValue": {
          "value": "Fade",
          "computed": true
        }
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\r\nYou may specify a single timeout for all transitions, or individually with an object.",
        "defaultValue": {
          "value": "{ enter: duration.enteringScreen, exit: duration.leavingScreen }",
          "computed": false
        }
      },
      "TransitionProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `Transition` element."
      }
    }
  },
  "packages\\material-ui\\src\\DialogActions\\DialogActions.js": {
    "description": "",
    "displayName": "DialogActions",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableActionSpacing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the dialog actions do not have additional margin.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\DialogContent\\DialogContent.js": {
    "description": "",
    "displayName": "DialogContent",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\DialogContentText\\DialogContentText.js": {
    "description": "",
    "displayName": "DialogContentText",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      }
    }
  },
  "packages\\material-ui\\src\\DialogTitle\\DialogTitle.js": {
    "description": "",
    "displayName": "DialogTitle",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableTypography": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the children won't be wrapped by a typography component.\r\nFor instance, this can be useful to render an h4 instead of the default h2.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Divider\\Divider.js": {
    "description": "",
    "displayName": "Divider",
    "methods": [],
    "props": {
      "absolute": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'hr'",
          "computed": false
        }
      },
      "inset": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the divider will be indented.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "light": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the divider will have a lighter color.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Drawer\\Drawer.js": {
    "description": "The properties of the [Modal](/api/modal/) component are available\r\nwhen `variant=\"temporary\"` is set.",
    "displayName": "Drawer",
    "methods": [],
    "props": {
      "anchor": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Side from which the drawer will appear.",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The contents of the drawer."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The elevation of the drawer.",
        "defaultValue": {
          "value": "16",
          "computed": false
        }
      },
      "ModalProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Modal`](/api/modal/) element."
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be closed.\r\n\n@param {object} event The event source of the callback"
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the drawer is open.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "PaperProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Paper`](/api/paper/) element."
      },
      "SlideProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Slide`](/api/slide/) element."
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\r\nYou may specify a single timeout for all transitions, or individually with an object.",
        "defaultValue": {
          "value": "{ enter: duration.enteringScreen, exit: duration.leavingScreen }",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'permanent'",
              "computed": false
            },
            {
              "value": "'persistent'",
              "computed": false
            },
            {
              "value": "'temporary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'temporary'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\ExpansionPanel\\ExpansionPanel.js": {
    "description": "",
    "displayName": "ExpansionPanel",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the expansion panel."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "CollapseProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Collapse`](/api/collapse/) element."
      },
      "defaultExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, expands the panel by default.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the panel will be displayed in a disabled state.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "expanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, expands the panel, otherwise collapse it.\r\nSetting this prop enables control over the panel."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the expand/collapse state is changed.\r\n\n@param {object} event The event source of the callback\r\n@param {boolean} expanded The `expanded` state of the panel"
      }
    }
  },
  "packages\\material-ui\\src\\ExpansionPanelActions\\ExpansionPanelActions.js": {
    "description": "",
    "displayName": "ExpansionPanelActions",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\ExpansionPanelDetails\\ExpansionPanelDetails.js": {
    "description": "",
    "displayName": "ExpansionPanelDetails",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the expansion panel details."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\ExpansionPanelSummary\\ExpansionPanelSummary.js": {
    "description": "",
    "displayName": "ExpansionPanelSummary",
    "methods": [
      {
        "name": "handleFocus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleBlur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the expansion panel summary."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\r\nIf `true`, the summary will be displayed in a disabled state.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "expanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\r\nIf `true`, expands the summary, otherwise collapse it."
      },
      "expandIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display as the expand indicator."
      },
      "IconButtonProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `TouchRipple` element wrapping the expand icon."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\Fade\\Fade.js": {
    "description": "The Fade transition is used by the [Modal](/utils/modal/) component.\r\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
    "displayName": "Fade",
    "methods": [
      {
        "name": "handleEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleExit",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "element"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "A single child content element."
      },
      "in": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will transition in."
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "timeout": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\r\nYou may specify a single timeout for all transitions, or individually with an object.",
        "defaultValue": {
          "value": "{\r\n  enter: duration.enteringScreen,\r\n  exit: duration.leavingScreen,\r\n}",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\FilledInput\\FilledInput.js": {
    "description": "",
    "displayName": "FilledInput",
    "methods": [],
    "props": {
      "autoComplete": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "This property helps users to fill forms faster, especially on mobile devices.\r\nThe name can be confusing, as it's more like an autofill.\r\nYou can learn more about it here:\r\nhttps://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill"
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be focused during the first mount."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the wrapper element."
      },
      "defaultValue": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The default input value, useful when not controlling the component."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be disabled."
      },
      "endAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "End `InputAdornment` for this component."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will indicate an error. This is normally obtained via context from\r\nFormControl."
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will take up the full width of its container."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element."
      },
      "inputComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the native input.\r\nEither a string to use a DOM element or a component."
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Attributes applied to the `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Use that property to pass a ref callback to the native input component."
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\r\nFormControl."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, a textarea element will be rendered."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name attribute of the `input` element."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the value is changed.\r\n\n@param {object} event The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.value`."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The short hint displayed in the input before the user enters a value."
      },
      "readOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "It prevents the user from changing the value of the field\r\n(not from interacting with the field)."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be required."
      },
      "rows": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Number of rows to display when multiline option is set to true."
      },
      "rowsMax": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Maximum number of rows to display when multiline option is set to true."
      },
      "startAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Start `InputAdornment` for this component."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Type of the input element. It should be a valid HTML5 input type."
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "bool"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              }
            }
          ]
        },
        "required": false,
        "description": "The input value, required for a controlled component."
      }
    }
  },
  "packages\\material-ui\\src\\FormControl\\FormControl.js": {
    "description": "Provides context such as filled/focused/error/required for form inputs.\r\nRelying on the context provides high flexibilty and ensures that the state always stays\r\nconsistent across the children of the `FormControl`.\r\nThis context is used by the following components:\r\n - FormLabel\r\n - FormHelperText\r\n - Input\r\n - InputLabel\r\n\n⚠️ Only one input can be used within a FormControl.",
    "displayName": "FormControl",
    "methods": [
      {
        "name": "handleFocus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleBlur",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleDirty",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClean",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The contents of the form control."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label, input and helper text should be displayed in a disabled state.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label should be displayed in an error state.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will take up the full width of its container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'none'",
              "computed": false
            },
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'normal'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
        "defaultValue": {
          "value": "'none'",
          "computed": false
        }
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label will indicate that the input is required.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'standard'",
          "computed": false
        }
      }
    },
    "childContext": {
      "muiFormControl": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\FormControlLabel\\FormControlLabel.js": {
    "description": "Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.\r\nUse this component if you want to display an extra label.",
    "displayName": "FormControlLabel",
    "methods": [],
    "props": {
      "checked": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "If `true`, the component appears selected."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "control": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the control will be disabled."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Use that property to pass a ref callback to the native input component."
      },
      "label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The text to be used in an enclosing label element."
      },
      "labelPlacement": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'end'",
              "computed": false
            },
            {
              "value": "'start'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The position of the label.",
        "defaultValue": {
          "value": "'end'",
          "computed": false
        }
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the state is changed.\r\n\n@param {object} event The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.checked`.\r\n@param {boolean} checked The `checked` value of the switch"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value of the component."
      }
    },
    "context": {
      "muiFormControl": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\FormGroup\\FormGroup.js": {
    "description": "`FormGroup` wraps controls such as `Checkbox` and `Switch`.\r\nIt provides compact row layout.\r\nFor the `Radio`, you should be using the `RadioGroup` component instead of this one.",
    "displayName": "FormGroup",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "row": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display group of elements in a compact row.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\FormHelperText\\FormHelperText.js": {
    "description": "",
    "displayName": "FormHelperText",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'p'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the helper text should be displayed in a disabled state."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, helper text should be displayed in an error state."
      },
      "filled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the helper text should use filled classes key."
      },
      "focused": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the helper text should use focused classes key."
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'dense'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\r\nFormControl."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the helper text should use required classes key."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use."
      }
    },
    "context": {
      "muiFormControl": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\FormLabel\\FormLabel.js": {
    "description": "",
    "displayName": "FormLabel",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'label'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label should be displayed in a disabled state."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label should be displayed in an error state."
      },
      "filled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label should use filled classes key."
      },
      "focused": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input of this label is focused (used by `FormGroup` components)."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label will indicate that the input is required."
      }
    },
    "context": {
      "muiFormControl": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\Grid\\Grid.js": {
    "description": "",
    "displayName": "Grid",
    "methods": [],
    "props": {
      "alignContent": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'stretch'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'flex-start'",
              "computed": false
            },
            {
              "value": "'flex-end'",
              "computed": false
            },
            {
              "value": "'space-between'",
              "computed": false
            },
            {
              "value": "'space-around'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the `align-content` style property.\r\nIt's applied for all screen sizes.",
        "defaultValue": {
          "value": "'stretch'",
          "computed": false
        }
      },
      "alignItems": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'flex-start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'flex-end'",
              "computed": false
            },
            {
              "value": "'stretch'",
              "computed": false
            },
            {
              "value": "'baseline'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the `align-items` style property.\r\nIt's applied for all screen sizes.",
        "defaultValue": {
          "value": "'stretch'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "container": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will have the flex *container* behavior.\r\nYou should be wrapping *items* with a *container*.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'row'",
              "computed": false
            },
            {
              "value": "'row-reverse'",
              "computed": false
            },
            {
              "value": "'column'",
              "computed": false
            },
            {
              "value": "'column-reverse'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the `flex-direction` style property.\r\nIt is applied for all screen sizes.",
        "defaultValue": {
          "value": "'row'",
          "computed": false
        }
      },
      "item": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will have the flex *item* behavior.\r\nYou should be wrapping *items* with a *container*.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "justify": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'flex-start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'flex-end'",
              "computed": false
            },
            {
              "value": "'space-between'",
              "computed": false
            },
            {
              "value": "'space-around'",
              "computed": false
            },
            {
              "value": "'space-evenly'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the `justify-content` style property.\r\nIt is applied for all screen sizes.",
        "defaultValue": {
          "value": "'flex-start'",
          "computed": false
        }
      },
      "lg": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use.\r\nIt's applied for the `lg` breakpoint and wider screens if not overridden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "md": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use.\r\nIt's applied for the `md` breakpoint and wider screens if not overridden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "sm": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use.\r\nIt's applied for the `sm` breakpoint and wider screens if not overridden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "spacing": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "0",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "16",
              "computed": false
            },
            {
              "value": "24",
              "computed": false
            },
            {
              "value": "32",
              "computed": false
            },
            {
              "value": "40",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the space between the type `item` component.\r\nIt can only be used on a type `container` component.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "wrap": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'nowrap'",
              "computed": false
            },
            {
              "value": "'wrap'",
              "computed": false
            },
            {
              "value": "'wrap-reverse'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the `flex-wrap` style property.\r\nIt's applied for all screen sizes.",
        "defaultValue": {
          "value": "'wrap'",
          "computed": false
        }
      },
      "xl": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use.\r\nIt's applied for the `xl` breakpoint and wider screens.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "xs": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "false",
              "computed": false
            },
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "1",
              "computed": false
            },
            {
              "value": "2",
              "computed": false
            },
            {
              "value": "3",
              "computed": false
            },
            {
              "value": "4",
              "computed": false
            },
            {
              "value": "5",
              "computed": false
            },
            {
              "value": "6",
              "computed": false
            },
            {
              "value": "7",
              "computed": false
            },
            {
              "value": "8",
              "computed": false
            },
            {
              "value": "9",
              "computed": false
            },
            {
              "value": "10",
              "computed": false
            },
            {
              "value": "11",
              "computed": false
            },
            {
              "value": "12",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Defines the number of grids the component is going to use.\r\nIt's applied for all the screen sizes with the lowest priority.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "zeroMinWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, it sets `min-width: 0` on the item.\r\nRefer to the limitations section of the documentation to better understand the use case.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\GridList\\GridList.js": {
    "description": "",
    "displayName": "GridList",
    "methods": [],
    "props": {
      "cellHeight": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "'auto'",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "Number of px for one cell height.\r\nYou can set `'auto'` if you want to let the children determine the height.",
        "defaultValue": {
          "value": "180",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Grid Tiles that will be in Grid List."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "cols": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of columns.",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'ul'",
          "computed": false
        }
      },
      "spacing": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of px for the spacing between tiles.",
        "defaultValue": {
          "value": "4",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\GridListTile\\GridListTile.js": {
    "description": "",
    "displayName": "GridListTile",
    "methods": [
      {
        "name": "fit",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "ensureImageCover",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Theoretically you can pass any node as children, but the main use case is to pass an img,\r\nin which case GridListTile takes care of making the image \"cover\" available space\r\n(similar to `background-size: cover` or to `object-fit: cover`)."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "cols": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of the tile in number of grid cells.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'li'",
          "computed": false
        }
      },
      "rows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Height of the tile in number of grid cells.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\GridListTileBar\\GridListTileBar.js": {
    "description": "",
    "displayName": "GridListTileBar",
    "methods": [],
    "props": {
      "actionIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "An IconButton element to be used as secondary action target\r\n(primary action target is the tile itself)."
      },
      "actionPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Position of secondary action IconButton.",
        "defaultValue": {
          "value": "'right'",
          "computed": false
        }
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "subtitle": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "String or element serving as subtitle (support text)."
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Title to be displayed on tile."
      },
      "titlePosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Position of the title bar.",
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Grow\\Grow.js": {
    "description": "The Grow transition is used by the [Tooltip](/demos/tooltips/) and\r\n[Popover](/utils/popover/) components.\r\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
    "displayName": "Grow",
    "methods": [
      {
        "name": "handleEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleExit",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "addEndListener",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "_",
            "type": null
          },
          {
            "name": "next",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "element"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "A single child content element."
      },
      "in": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, show the component; triggers the enter or exit animation."
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "timeout": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "'auto'",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\r\nYou may specify a single timeout for all transitions, or individually with an object.\r\n\nSet to 'auto' to automatically calculate transition time based on height.",
        "defaultValue": {
          "value": "'auto'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Hidden\\Hidden.js": {
    "description": "Responsively hides children based on the selected implementation.",
    "displayName": "Hidden",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "implementation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'js'",
              "computed": false
            },
            {
              "value": "'css'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify which implementation to use.  'js' is the default, 'css' works better for server\r\nside rendering.",
        "defaultValue": {
          "value": "'js'",
          "computed": false
        }
      },
      "initialWidth": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'xs'",
              "computed": false
            },
            {
              "value": "'sm'",
              "computed": false
            },
            {
              "value": "'md'",
              "computed": false
            },
            {
              "value": "'lg'",
              "computed": false
            },
            {
              "value": "'xl'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "You can use this property when choosing the `js` implementation with server side rendering.\r\n\nAs `window.innerWidth` is unavailable on the server,\r\nwe default to rendering an empty componenent during the first mount.\r\nIn some situation you might want to use an heristic to approximate\r\nthe screen width of the client browser screen width.\r\n\nFor instance, you could be using the user-agent or the client-hints.\r\nhttps://caniuse.com/#search=client%20hint"
      },
      "lgDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "lgUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and up will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "mdDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "mdUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and up will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "only": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "'xs'",
                  "computed": false
                },
                {
                  "value": "'sm'",
                  "computed": false
                },
                {
                  "value": "'md'",
                  "computed": false
                },
                {
                  "value": "'lg'",
                  "computed": false
                },
                {
                  "value": "'xl'",
                  "computed": false
                }
              ]
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "enum",
                "value": [
                  {
                    "value": "'xs'",
                    "computed": false
                  },
                  {
                    "value": "'sm'",
                    "computed": false
                  },
                  {
                    "value": "'md'",
                    "computed": false
                  },
                  {
                    "value": "'lg'",
                    "computed": false
                  },
                  {
                    "value": "'xl'",
                    "computed": false
                  }
                ]
              }
            }
          ]
        },
        "required": false,
        "description": "Hide the given breakpoint(s)."
      },
      "smDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "smUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and up will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "xlDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "xlUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and up will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "xsDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "xsUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and up will be hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Hidden\\HiddenCss.js": {
    "description": "@ignore - internal component.",
    "displayName": "HiddenCss",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "implementation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'js'",
              "computed": false
            },
            {
              "value": "'css'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify which implementation to use.  'js' is the default, 'css' works better for server\r\nside rendering."
      },
      "lgDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden."
      },
      "lgUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and up will be hidden."
      },
      "mdDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden."
      },
      "mdUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and up will be hidden."
      },
      "only": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "enum",
              "value": [
                {
                  "value": "'xs'",
                  "computed": false
                },
                {
                  "value": "'sm'",
                  "computed": false
                },
                {
                  "value": "'md'",
                  "computed": false
                },
                {
                  "value": "'lg'",
                  "computed": false
                },
                {
                  "value": "'xl'",
                  "computed": false
                }
              ]
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "enum",
                "value": [
                  {
                    "value": "'xs'",
                    "computed": false
                  },
                  {
                    "value": "'sm'",
                    "computed": false
                  },
                  {
                    "value": "'md'",
                    "computed": false
                  },
                  {
                    "value": "'lg'",
                    "computed": false
                  },
                  {
                    "value": "'xl'",
                    "computed": false
                  }
                ]
              }
            }
          ]
        },
        "required": false,
        "description": "Hide the given breakpoint(s)."
      },
      "smDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden."
      },
      "smUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and up will be hidden."
      },
      "xlDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden."
      },
      "xlUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and up will be hidden."
      },
      "xsDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and down will be hidden."
      },
      "xsUp": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, screens this size and up will be hidden."
      }
    }
  },
  "packages\\material-ui\\src\\Icon\\Icon.js": {
    "description": "",
    "displayName": "Icon",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The name of the icon font ligature."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'action'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "'disabled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'span'",
          "computed": false
        }
      },
      "fontSize": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\IconButton\\IconButton.js": {
    "description": "Refer to the [Icons](/style/icons/) section of the documentation\r\nregarding the available icon options.",
    "displayName": "IconButton",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon element."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the button will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple will be disabled."
      }
    }
  },
  "packages\\material-ui\\src\\Input\\Input.js": {
    "description": "",
    "displayName": "Input",
    "methods": [],
    "props": {
      "autoComplete": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "This property helps users to fill forms faster, especially on mobile devices.\r\nThe name can be confusing, as it's more like an autofill.\r\nYou can learn more about it here:\r\nhttps://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill"
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be focused during the first mount."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the wrapper element."
      },
      "defaultValue": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The default input value, useful when not controlling the component."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be disabled."
      },
      "disableUnderline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will not have an underline."
      },
      "endAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "End `InputAdornment` for this component."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will indicate an error. This is normally obtained via context from\r\nFormControl."
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will take up the full width of its container."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element."
      },
      "inputComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the native input.\r\nEither a string to use a DOM element or a component."
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Attributes applied to the `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Use that property to pass a ref callback to the native input component."
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\r\nFormControl."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, a textarea element will be rendered."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name attribute of the `input` element."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the value is changed.\r\n\n@param {object} event The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.value`."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The short hint displayed in the input before the user enters a value."
      },
      "readOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "It prevents the user from changing the value of the field\r\n(not from interacting with the field)."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be required."
      },
      "rows": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Number of rows to display when multiline option is set to true."
      },
      "rowsMax": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Maximum number of rows to display when multiline option is set to true."
      },
      "startAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Start `InputAdornment` for this component."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Type of the input element. It should be a valid HTML5 input type."
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "bool"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              }
            }
          ]
        },
        "required": false,
        "description": "The input value, required for a controlled component."
      }
    }
  },
  "packages\\material-ui\\src\\InputAdornment\\InputAdornment.js": {
    "description": "",
    "displayName": "InputAdornment",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the component, normally an `IconButton` or string."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "disableTypography": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If children is a string then disable wrapping in a Typography component.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The position this adornment should appear relative to the `Input`."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use."
      }
    }
  },
  "packages\\material-ui\\src\\InputBase\\InputBase.js": {
    "description": "`InputBase` contains as few styles as possible.\r\nIt aims to be a simple building block for creating an input.\r\nIt contains a load of style reset and some state logic.",
    "displayName": "InputBase",
    "methods": [
      {
        "name": "handleFocus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleBlur",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "...args",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleRefInput",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ref",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "checkDirty",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "obj",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "autoComplete": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "This property helps users to fill forms faster, especially on mobile devices.\r\nThe name can be confusing, as it's more like an autofill.\r\nYou can learn more about it here:\r\nhttps://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill"
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be focused during the first mount."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the wrapper element."
      },
      "defaultValue": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The default input value, useful when not controlling the component."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be disabled."
      },
      "endAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "End `InputAdornment` for this component."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will indicate an error. This is normally obtained via context from\r\nFormControl."
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will take up the full width of its container.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element."
      },
      "inputComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the native input.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'input'",
          "computed": false
        }
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Attributes applied to the `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Use that property to pass a ref callback to the native input component."
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\r\nFormControl."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, a textarea element will be rendered.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name attribute of the `input` element."
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the value is changed.\r\n\n@param {object} event The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.value`."
      },
      "onEmpty": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onFilled": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onFocus": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onKeyUp": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The short hint displayed in the input before the user enters a value."
      },
      "readOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "It prevents the user from changing the value of the field\r\n(not from interacting with the field)."
      },
      "renderPrefix": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be required."
      },
      "rows": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Number of rows to display when multiline option is set to true."
      },
      "rowsMax": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Maximum number of rows to display when multiline option is set to true."
      },
      "startAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Start `InputAdornment` for this component."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Type of the input element. It should be a valid HTML5 input type.",
        "defaultValue": {
          "value": "'text'",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "bool"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              }
            }
          ]
        },
        "required": false,
        "description": "The input value, required for a controlled component."
      }
    },
    "context": {
      "muiFormControl": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    },
    "childContext": {
      "muiFormControl": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\InputBase\\Textarea.js": {
    "description": "@ignore - internal component.",
    "displayName": "Textarea",
    "methods": [
      {
        "name": "handleRefInput",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ref",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleRefSinglelineShadow",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ref",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleRefShadow",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ref",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "syncHeightWithShadow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "defaultValue": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "@ignore"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "rows": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Number of rows to display when multiline option is set to true.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "rowsMax": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Maximum number of rows to display when multiline option is set to true."
      },
      "textareaRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Use that property to pass a ref callback to the native textarea element."
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\InputLabel\\InputLabel.js": {
    "description": "",
    "displayName": "InputLabel",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The contents of the `InputLabel`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableAnimation": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the transition animation is disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, apply disabled class."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label will be displayed in an error state."
      },
      "focused": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input of this label is focused."
      },
      "FormLabelClasses": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "`classes` property applied to the [`FormLabel`](/api/form-label/) element."
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'dense'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\r\nFormControl."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "if `true`, the label will indicate that the input is required."
      },
      "shrink": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label is shrunk."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use."
      }
    },
    "context": {
      "muiFormControl": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\LinearProgress\\LinearProgress.js": {
    "description": "## ARIA\r\n\nIf the progress bar is describing the loading progress of a particular region of a page,\r\nyou should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\r\nattribute to `true` on that region until it has finished loading.",
    "displayName": "LinearProgress",
    "methods": [],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The value of the progress indicator for the determinate and buffer variants.\r\nValue between 0 and 100."
      },
      "valueBuffer": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The value for the buffer variant.\r\nValue between 0 and 100."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'determinate'",
              "computed": false
            },
            {
              "value": "'indeterminate'",
              "computed": false
            },
            {
              "value": "'buffer'",
              "computed": false
            },
            {
              "value": "'query'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.\r\nUse indeterminate or query when there is no progress value.",
        "defaultValue": {
          "value": "'indeterminate'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\List\\List.js": {
    "description": "",
    "displayName": "List",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'ul'",
          "computed": false
        }
      },
      "dense": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, compact vertical padding designed for keyboard and mouse input will be used for\r\nthe list and list items. The property is available to descendant components as the\r\n`dense` context.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disablePadding": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, vertical padding will be removed from the list.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "subheader": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the subheader, normally `ListSubheader`."
      }
    },
    "childContext": {
      "dense": {
        "type": {
          "name": "bool"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\ListItem\\ListItem.js": {
    "description": "",
    "displayName": "ListItem",
    "methods": [],
    "props": {
      "button": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the list item will be a button (using `ButtonBase`).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.\r\nBy default, it's a `li` when `button` is `false` and a `div` when `button` is `true`."
      },
      "ContainerComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The container component used when a `ListItemSecondaryAction` is rendered.",
        "defaultValue": {
          "value": "'li'",
          "computed": false
        }
      },
      "ContainerProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the container element when the component\r\nis used to display a `ListItemSecondaryAction`."
      },
      "dense": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, compact vertical padding designed for keyboard and mouse input will be used.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the list item will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableGutters": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the left and right padding is removed.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "divider": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, a 1px light border is added to the bottom of the list item.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "focusVisibleClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use to apply selected styling.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "context": {
      "dense": {
        "type": {
          "name": "bool"
        },
        "required": false
      }
    },
    "childContext": {
      "dense": {
        "type": {
          "name": "bool"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\ListItemAvatar\\ListItemAvatar.js": {
    "description": "This is a simple wrapper to apply the `dense` mode styles to `Avatar`.",
    "displayName": "ListItemAvatar",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "element"
        },
        "required": true,
        "description": "The content of the component – normally `Avatar`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      }
    },
    "context": {
      "dense": {
        "type": {
          "name": "bool"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\ListItemIcon\\ListItemIcon.js": {
    "description": "A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.",
    "displayName": "ListItemIcon",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "element"
        },
        "required": true,
        "description": "The content of the component, normally `Icon`, `SvgIcon`,\r\nor a `@material-ui/icons` SVG icon element."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\ListItemSecondaryAction\\ListItemSecondaryAction.js": {
    "description": "",
    "displayName": "ListItemSecondaryAction",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component, normally an `IconButton` or selection control."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\ListItemText\\ListItemText.js": {
    "description": "",
    "displayName": "ListItemText",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Alias for the `primary` property."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableTypography": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the children won't be wrapped by a Typography component.\r\nThis can be useful to render an alternative Typography variant by wrapping\r\nthe `children` (or `primary`) text, and optional `secondary` text\r\nwith the Typography component.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "inset": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the children will be indented.\r\nThis should be used if there is no left avatar or left icon.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "primary": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The main content element."
      },
      "primaryTypographyProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "These props will be forwarded to the primary typography component\r\n(as long as disableTypography is not `true`)."
      },
      "secondary": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The secondary content element."
      },
      "secondaryTypographyProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "These props will be forwarded to the secondary typography component\r\n(as long as disableTypography is not `true`)."
      }
    },
    "context": {
      "dense": {
        "type": {
          "name": "bool"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\ListSubheader\\ListSubheader.js": {
    "description": "",
    "displayName": "ListSubheader",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'li'",
          "computed": false
        }
      },
      "disableGutters": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the List Subheader will not have gutters.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableSticky": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the List Subheader will not stick to the top during scroll.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "inset": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the List Subheader will be indented.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Menu\\Menu.js": {
    "description": "",
    "displayName": "Menu",
    "methods": [
      {
        "name": "getContentAnchorEl",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "element",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleListKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          },
          {
            "name": "key",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "anchorEl": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "The DOM element used to set the position of the menu."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Menu contents, normally `MenuItem`s."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "disableAutoFocusItem": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the selected / first menu item will not be auto focused.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "MenuListProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`MenuList`](/api/menu-list/) element."
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be closed.\r\n\n@param {object} event The event source of the callback"
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the Menu enters."
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the Menu has entered."
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the Menu is entering."
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the Menu exits."
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the Menu has exited."
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the Menu is exiting."
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "If `true`, the menu is visible."
      },
      "PaperProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "PopoverClasses": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "`classes` property applied to the [`Popover`](/api/popover/) element."
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "'auto'",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "The length of the transition in `ms`, or 'auto'",
        "defaultValue": {
          "value": "'auto'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\MenuItem\\MenuItem.js": {
    "description": "",
    "displayName": "MenuItem",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Menu item contents."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'li'",
          "computed": false
        }
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "'menuitem'",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\MenuList\\MenuList.js": {
    "description": "",
    "displayName": "MenuList",
    "methods": [
      {
        "name": "setTabIndex",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleBlur",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleItemFocus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "resetTabIndex",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "MenuList contents, normally `MenuItem`s."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\MobileStepper\\MobileStepper.js": {
    "description": "",
    "displayName": "MobileStepper",
    "methods": [],
    "props": {
      "activeStep": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Set the active step (zero based index).\r\nDefines which dot is highlighted when the variant is 'dots'.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "backButton": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "A back button element. For instance, it can be be a `Button` or a `IconButton`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "LinearProgressProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `LinearProgress` element."
      },
      "nextButton": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "A next button element. For instance, it can be be a `Button` or a `IconButton`."
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'static'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set the positioning type.",
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        }
      },
      "steps": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The total steps."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'text'",
              "computed": false
            },
            {
              "value": "'dots'",
              "computed": false
            },
            {
              "value": "'progress'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'dots'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Modal\\Modal.js": {
    "description": "This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).",
    "displayName": "Modal",
    "methods": [
      {
        "name": "getDerivedStateFromProps",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "nextProps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleRendered",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleOpen",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleExited",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleBackdropClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDocumentKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "checkForFocus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "enforceFocus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "autoFocus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "restoreLastFocus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "isTopModal",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "BackdropComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "A backdrop component. This property enables custom backdrop rendering.",
        "defaultValue": {
          "value": "Backdrop",
          "computed": true
        }
      },
      "BackdropProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Backdrop`](/api/backdrop/) element."
      },
      "children": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "A single child content element."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "container": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "A node, component instance, or function that returns either.\r\nThe `container` will have the portal children appended to it."
      },
      "disableAutoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the modal will not automatically shift focus to itself when it opens, and\r\nreplace it to the last focused element when it closes.\r\nThis also works correctly with any modal children that have the `disableAutoFocus` prop.\r\n\nGenerally this should never be set to `true` as it makes the modal less\r\naccessible to assistive technologies, like screen readers.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableBackdropClick": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, clicking the backdrop will not fire any callback.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableEnforceFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the modal will not prevent focus from leaving the modal while open.\r\n\nGenerally this should never be set to `true` as it makes the modal less\r\naccessible to assistive technologies, like screen readers.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableEscapeKeyDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, hitting escape will not fire any callback.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disablePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable the portal behavior.\r\nThe children stay within it's parent DOM hierarchy.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableRestoreFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the modal will not restore focus to previously focused element once\r\nmodal is hidden.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hideBackdrop": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the backdrop is not rendered.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "keepMounted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Always keep the children in the DOM.\r\nThis property can be useful in SEO situation or\r\nwhen you want to maximize the responsiveness of the Modal.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "manager": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "A modal manager used to track and manage the state of open\r\nModals. This enables customizing how modals interact within a container.",
        "defaultValue": {
          "value": "new ModalManager()",
          "computed": false
        }
      },
      "onBackdropClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the backdrop is clicked."
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be closed.\r\nThe `reason` parameter can optionally be used to control the response to `onClose`.\r\n\n@param {object} event The event source of the callback\r\n@param {string} reason Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`"
      },
      "onEscapeKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the escape key is pressed,\r\n`disableEscapeKeyDown` is false and the modal is in focus."
      },
      "onRendered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired once the children has been mounted into the `container`.\r\nIt signals that the `open={true}` property took effect."
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "If `true`, the modal is open."
      }
    }
  },
  "packages\\material-ui\\src\\NativeSelect\\NativeSelect.js": {
    "description": "An alternative to `<Select native />` with a much smaller bundle size footprint.",
    "displayName": "NativeSelect",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The option elements to populate the select with.\r\nCan be some `<option>` elements."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "IconComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The icon that displays the arrow.",
        "defaultValue": {
          "value": "ArrowDropDownIcon",
          "computed": true
        }
      },
      "input": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "An `Input` element; does not have to be a material-ui specific `Input`.",
        "defaultValue": {
          "value": "<Input />",
          "computed": false
        }
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Attributes applied to the `select` element."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function fired when a menu item is selected.\r\n\n@param {object} event The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.value`."
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "bool"
            }
          ]
        },
        "required": false,
        "description": "The input value."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use."
      }
    },
    "context": {
      "muiFormControl": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\NativeSelect\\NativeSelectInput.js": {
    "description": "@ignore - internal component.",
    "displayName": "NativeSelectInput",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The option elements to populate the select with.\r\nCan be some `<option>` elements."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the select element."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the select will be disabled."
      },
      "IconComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The icon that displays the arrow."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Use that property to pass a ref callback to the native select element."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name attribute of the `select` or hidden `input` element."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function fired when a menu item is selected.\r\n\n@param {object} event The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.value`."
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "bool"
            }
          ]
        },
        "required": false,
        "description": "The input value."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use."
      }
    }
  },
  "packages\\material-ui\\src\\NoSsr\\NoSsr.js": {
    "description": "NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\r\n\nThis component can be useful in a variety of situations:\r\n- Escape hatch for broken dependencies not supporting SSR.\r\n- Improve the time-to-first paint on the client by only rendering above the fold.\r\n- Reduce the rendering time on the server.\r\n- Under too heavy server load, you can turn on service degradation.",
    "displayName": "NoSsr",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": ""
      },
      "defer": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will not only prevent server side rendering.\r\nIt will also defer the rendering of the children into a different screen frame.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fallback": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The fallback content to display.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\OutlinedInput\\NotchedOutline.js": {
    "description": "@ignore - internal component.",
    "displayName": "NotchedOutline",
    "methods": [],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the outline should be displayed in a disabled state."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the outline should be displayed in an error state."
      },
      "focused": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the outline should be displayed in a focused state."
      },
      "labelWidth": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The width of the legend."
      },
      "notched": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "If `true`, the outline is notched to accommodate the label."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\OutlinedInput\\OutlinedInput.js": {
    "description": "",
    "displayName": "OutlinedInput",
    "methods": [],
    "props": {
      "autoComplete": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "This property helps users to fill forms faster, especially on mobile devices.\r\nThe name can be confusing, as it's more like an autofill.\r\nYou can learn more about it here:\r\nhttps://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill"
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be focused during the first mount."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the wrapper element."
      },
      "defaultValue": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The default input value, useful when not controlling the component."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be disabled."
      },
      "endAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "End `InputAdornment` for this component."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will indicate an error. This is normally obtained via context from\r\nFormControl."
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will take up the full width of its container."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element."
      },
      "inputComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the native input.\r\nEither a string to use a DOM element or a component."
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Attributes applied to the `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Use that property to pass a ref callback to the native input component."
      },
      "labelWidth": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The width of the legend."
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\r\nFormControl."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, a textarea element will be rendered."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name attribute of the `input` element."
      },
      "notched": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the outline is notched to accommodate the label."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the value is changed.\r\n\n@param {object} event The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.value`."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The short hint displayed in the input before the user enters a value."
      },
      "readOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "It prevents the user from changing the value of the field\r\n(not from interacting with the field)."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be required."
      },
      "rows": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Number of rows to display when multiline option is set to true."
      },
      "rowsMax": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Maximum number of rows to display when multiline option is set to true."
      },
      "startAdornment": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Start `InputAdornment` for this component."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Type of the input element. It should be a valid HTML5 input type."
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "bool"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              }
            }
          ]
        },
        "required": false,
        "description": "The input value, required for a controlled component."
      }
    }
  },
  "packages\\material-ui\\src\\Paper\\Paper.js": {
    "description": "",
    "displayName": "Paper",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Shadow depth, corresponds to `dp` in the spec.\r\nIt's accepting values between 0 and 24 inclusive.",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "square": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, rounded corners are disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Popover\\Popover.js": {
    "description": "",
    "displayName": "Popover",
    "methods": [
      {
        "name": "componentWillUnmount",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "setPositioningStyles",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "element",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getPositioningStyle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "element",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getAnchorOffset",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "contentAnchorOffset",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getContentAnchorOffset",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "element",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getTransformOrigin",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "elemRect",
            "type": null
          },
          {
            "name": "contentAnchorOffset",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "element",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "action": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "This is callback property. It's called by the component on mount.\r\nThis is useful when you want to trigger an action programmatically.\r\nIt currently only supports updatePosition() action.\r\n\n@param {object} actions This object contains all posible actions\r\nthat can be triggered programmatically."
      },
      "anchorEl": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "This is the DOM element, or a function that returns the DOM element,\r\nthat may be used to set the position of the popover."
      },
      "anchorOrigin": {
        "type": {
          "name": "shape",
          "value": {
            "horizontal": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'left'",
                      "computed": false
                    },
                    {
                      "value": "'center'",
                      "computed": false
                    },
                    {
                      "value": "'right'",
                      "computed": false
                    }
                  ]
                }
              ],
              "required": true
            },
            "vertical": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'top'",
                      "computed": false
                    },
                    {
                      "value": "'center'",
                      "computed": false
                    },
                    {
                      "value": "'bottom'",
                      "computed": false
                    }
                  ]
                }
              ],
              "required": true
            }
          }
        },
        "required": false,
        "description": "This is the point on the anchor where the popover's\r\n`anchorEl` will attach to. This is not used when the\r\nanchorReference is 'anchorPosition'.\r\n\nOptions:\r\nvertical: [top, center, bottom];\r\nhorizontal: [left, center, right].",
        "defaultValue": {
          "value": "{\r\n  vertical: 'top',\r\n  horizontal: 'left',\r\n}",
          "computed": false
        }
      },
      "anchorPosition": {
        "type": {
          "name": "shape",
          "value": {
            "left": {
              "name": "number",
              "required": true
            },
            "top": {
              "name": "number",
              "required": true
            }
          }
        },
        "required": false,
        "description": "This is the position that may be used\r\nto set the position of the popover.\r\nThe coordinates are relative to\r\nthe application's client area."
      },
      "anchorReference": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'anchorEl'",
              "computed": false
            },
            {
              "value": "'anchorPosition'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'anchorEl'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "container": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "A node, component instance, or function that returns either.\r\nThe `container` will passed to the Modal component.\r\nBy default, it uses the body of the anchorEl's top-level document object,\r\nso it's simply `document.body` most of the time."
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The elevation of the popover.",
        "defaultValue": {
          "value": "8",
          "computed": false
        }
      },
      "getContentAnchorEl": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "This function is called in order to retrieve the content anchor element.\r\nIt's the opposite of the `anchorEl` property.\r\nThe content anchor element should be an element inside the popover.\r\nIt's used to correctly scroll and set the position of the popover.\r\nThe positioning strategy tries to make the content anchor element just above the\r\nanchor element."
      },
      "marginThreshold": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Specifies how close to the edge of the window the popover can appear.",
        "defaultValue": {
          "value": "16",
          "computed": false
        }
      },
      "ModalClasses": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "`classes` property applied to the [`Modal`](/api/modal/) element."
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be closed.\r\n\n@param {object} event The event source of the callback."
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the component is entering."
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component has entered."
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component is entering."
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the component is exiting."
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component has exited."
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component is exiting."
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "If `true`, the popover is visible."
      },
      "PaperProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Paper`](/api/paper/) element."
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "transformOrigin": {
        "type": {
          "name": "shape",
          "value": {
            "horizontal": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'left'",
                      "computed": false
                    },
                    {
                      "value": "'center'",
                      "computed": false
                    },
                    {
                      "value": "'right'",
                      "computed": false
                    }
                  ]
                }
              ],
              "required": true
            },
            "vertical": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "enum",
                  "value": [
                    {
                      "value": "'top'",
                      "computed": false
                    },
                    {
                      "value": "'center'",
                      "computed": false
                    },
                    {
                      "value": "'bottom'",
                      "computed": false
                    }
                  ]
                }
              ],
              "required": true
            }
          }
        },
        "required": false,
        "description": "This is the point on the popover which\r\nwill attach to the anchor's origin.\r\n\nOptions:\r\nvertical: [top, center, bottom, x(px)];\r\nhorizontal: [left, center, right, x(px)].",
        "defaultValue": {
          "value": "{\r\n  vertical: 'top',\r\n  horizontal: 'left',\r\n}",
          "computed": false
        }
      },
      "TransitionComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Transition component.",
        "defaultValue": {
          "value": "Grow",
          "computed": true
        }
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "'auto'",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "Set to 'auto' to automatically calculate transition time based on height.",
        "defaultValue": {
          "value": "'auto'",
          "computed": false
        }
      },
      "TransitionProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `Transition` element."
      }
    }
  },
  "packages\\material-ui\\src\\Popper\\Popper.js": {
    "description": "Poppers rely on the 3rd party library [Popper.js](https://github.com/FezVrasta/popper.js) for positioning.",
    "displayName": "Popper",
    "methods": [
      {
        "name": "getDerivedStateFromProps",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "nextProps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleOpen",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handlePopperUpdate",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "data",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleExited",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "anchorEl": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "This is the DOM element, or a function that returns the DOM element,\r\nthat may be used to set the position of the popover.\r\nThe return value will passed as the reference object of the Popper\r\ninstance."
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "node"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": true,
        "description": "Popper render function or node."
      },
      "container": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "A node, component instance, or function that returns either.\r\nThe `container` will passed to the Modal component.\r\nBy default, it uses the body of the anchorEl's top-level document object,\r\nso it's simply `document.body` most of the time."
      },
      "disablePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable the portal behavior.\r\nThe children stay within it's parent DOM hierarchy.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "keepMounted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Always keep the children in the DOM.\r\nThis property can be useful in SEO situation or\r\nwhen you want to maximize the responsiveness of the Popper."
      },
      "modifiers": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Popper.js is based on a \"plugin-like\" architecture,\r\nmost of its features are fully encapsulated \"modifiers\".\r\n\nA modifier is a function that is called each time Popper.js needs to\r\ncompute the position of the popper.\r\nFor this reason, modifiers should be very performant to avoid bottlenecks.\r\nTo learn how to create a modifier, [read the modifiers documentation](https://github.com/FezVrasta/popper.js/blob/master/docs/_includes/popper-documentation.md#modifiers--object)."
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "If `true`, the popper is visible."
      },
      "placement": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'bottom-end'",
              "computed": false
            },
            {
              "value": "'bottom-start'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'left-end'",
              "computed": false
            },
            {
              "value": "'left-start'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right-end'",
              "computed": false
            },
            {
              "value": "'right-start'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'top-end'",
              "computed": false
            },
            {
              "value": "'top-start'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Popper placement.",
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        }
      },
      "popperOptions": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Options provided to the [`popper.js`](https://github.com/FezVrasta/popper.js) instance."
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "transition": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Help supporting a react-transition-group/Transition component.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Portal\\Portal.js": {
    "description": "Portals provide a first-class way to render children into a DOM node\r\nthat exists outside the DOM hierarchy of the parent component.",
    "displayName": "Portal",
    "methods": [
      {
        "name": "setMountNode",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "container",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getMountNode",
        "docblock": "@public",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The children to render into the `container`."
      },
      "container": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "A node, component instance, or function that returns either.\r\nThe `container` will have the portal children appended to it.\r\nBy default, it uses the body of the top-level document object,\r\nso it's simply `document.body` most of the time."
      },
      "disablePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable the portal behavior.\r\nThe children stay within it's parent DOM hierarchy.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onRendered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired once the children has been mounted into the `container`."
      }
    }
  },
  "packages\\material-ui\\src\\Radio\\Radio.js": {
    "description": "",
    "displayName": "Radio",
    "methods": [],
    "props": {
      "checked": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "If `true`, the component is checked."
      },
      "checkedIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display when the component is checked."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'secondary'",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the switch will be disabled."
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple effect will be disabled."
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display when the component is unchecked."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element."
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Attributes applied to the `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Use that property to pass a ref callback to the native input component."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the state is changed.\r\n\n@param {object} event The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.value`.\r\n@param {boolean} checked The `checked` value of the switch"
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The input component property `type`."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value of the component."
      }
    }
  },
  "packages\\material-ui\\src\\RadioGroup\\RadioGroup.js": {
    "description": "",
    "displayName": "RadioGroup",
    "methods": [
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleRadioChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          },
          {
            "name": "checked",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The name used to reference the value of the control."
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when a radio button is selected.\r\n\n@param {object} event The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.value`.\r\n@param {string} value The `value` of the selected radio button"
      },
      "onKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Value of the selected radio button."
      }
    }
  },
  "packages\\material-ui\\src\\RootRef\\RootRef.js": {
    "description": "Helper component to allow attaching a ref to a\r\nwrapped element to access the underlying DOM element.\r\n\nIt's highly inspired by https://github.com/facebook/react/issues/11401#issuecomment-340543801.\r\nFor example:\r\n```jsx\r\nimport React from 'react';\r\nimport RootRef from '@material-ui/core/RootRef';\r\n\nclass MyComponent extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.domRef = React.createRef();\r\n  }\r\n\n  componentDidMount() {\r\n    console.log(this.domRef.current); // DOM node\r\n  }\r\n\n  render() {\r\n    return (\r\n      <RootRef rootRef={this.domRef}>\r\n        <SomeChildComponent />\r\n      </RootRef>\r\n    );\r\n  }\r\n}\r\n```",
    "displayName": "RootRef",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "element"
        },
        "required": true,
        "description": "The wrapped element."
      },
      "rootRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": true,
        "description": "Provide a way to access the DOM node of the wrapped element.\r\nYou can provide a callback ref or a `React.createRef()` ref."
      }
    }
  },
  "packages\\material-ui\\src\\Select\\Select.js": {
    "description": "",
    "displayName": "Select",
    "methods": [],
    "props": {
      "autoWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the width of the popover will automatically be set according to the items inside the\r\nmenu, otherwise it will be at least the width of the select input.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The option elements to populate the select with.\r\nCan be some `MenuItem` when `native` is false and `option` when `native` is true."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "displayEmpty": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the selected item is displayed even if its value is empty.\r\nYou can only use it when the `native` property is `false` (default).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "IconComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The icon that displays the arrow.",
        "defaultValue": {
          "value": "ArrowDropDownIcon",
          "computed": true
        }
      },
      "input": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "An `Input` element; does not have to be a material-ui specific `Input`.",
        "defaultValue": {
          "value": "<Input />",
          "computed": false
        }
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Attributes applied to the `input` element.\r\nWhen `native` is `true`, the attributes are applied on the `select` element."
      },
      "MenuProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Menu`](/api/menu/) element."
      },
      "multiple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, `value` must be an array and the menu will support multiple selections.\r\nYou can only use it when the `native` property is `false` (default).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "native": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will be using a native `select` element.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function fired when a menu item is selected.\r\n\n@param {object} event The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.value`.\r\n@param {object} [child] The react element that was selected when `native` is `false` (default)."
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be closed.\r\nUse in controlled mode (see open).\r\n\n@param {object} event The event source of the callback"
      },
      "onOpen": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be opened.\r\nUse in controlled mode (see open).\r\n\n@param {object} event The event source of the callback"
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Control `select` open state.\r\nYou can only use it when the `native` property is `false` (default)."
      },
      "renderValue": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Render the selected value.\r\nYou can only use it when the `native` property is `false` (default).\r\n\n@param {*} value The `value` provided to the component.\r\n@returns {ReactElement}"
      },
      "SelectDisplayProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the clickable div element."
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "bool"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              }
            }
          ]
        },
        "required": false,
        "description": "The input value.\r\nThis property is required when the `native` property is `false` (default)."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use."
      }
    },
    "context": {
      "muiFormControl": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\Select\\SelectInput.js": {
    "description": "@ignore - internal component.",
    "displayName": "SelectInput",
    "methods": [
      {
        "name": "update",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ event, open }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleItemClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "child",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleBlur",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDisplayRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ref",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleInputRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ref",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "autoWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the width of the popover will automatically be set according to the items inside the\r\nmenu, otherwise it will be at least the width of the select input."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The option elements to populate the select with.\r\nCan be some `<MenuItem>` elements."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the select element."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the select will be disabled."
      },
      "displayEmpty": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the selected item is displayed even if its value is empty."
      },
      "IconComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The icon that displays the arrow."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Use that property to pass a ref callback to the native select element."
      },
      "MenuProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Menu`](/api/menu/) element."
      },
      "multiple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, `value` must be an array and the menu will support multiple selections."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name attribute of the `select` or hidden `input` element."
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function fired when a menu item is selected.\r\n\n@param {object} event The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.value`.\r\n@param {object} [child] The react element that was selected."
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be closed.\r\nUse in controlled mode (see open).\r\n\n@param {object} event The event source of the callback"
      },
      "onFocus": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onOpen": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be opened.\r\nUse in controlled mode (see open).\r\n\n@param {object} event The event source of the callback"
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Control `select` open state."
      },
      "readOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "renderValue": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Render the selected value.\r\n\n@param {*} value The `value` provided to the component.\r\n@returns {ReactElement}"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "SelectDisplayProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the clickable div element."
      },
      "tabIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "@ignore"
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "bool"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              }
            }
          ]
        },
        "required": true,
        "description": "The input value."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use."
      }
    }
  },
  "packages\\material-ui\\src\\Slide\\Slide.js": {
    "description": "The Slide transition is used by the [Snackbar](/demos/snackbars/) component.\r\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
    "displayName": "Slide",
    "methods": [
      {
        "name": "handleEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleEntering",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleExit",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleExited",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "updatePosition",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "element"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "A single child content element."
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'up'",
              "computed": false
            },
            {
              "value": "'down'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Direction the child node will enter from.",
        "defaultValue": {
          "value": "'down'",
          "computed": false
        }
      },
      "in": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, show the component; triggers the enter or exit animation."
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "timeout": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\r\nYou may specify a single timeout for all transitions, or individually with an object.",
        "defaultValue": {
          "value": "{\r\n  enter: duration.enteringScreen,\r\n  exit: duration.leavingScreen,\r\n}",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Snackbar\\Snackbar.js": {
    "description": "",
    "displayName": "Snackbar",
    "methods": [
      {
        "name": "getDerivedStateFromProps",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "nextProps",
            "type": null
          },
          {
            "name": "prevState",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setAutoHideTimer",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "autoHideDuration",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseLeave",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClickAway",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handlePause",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleResume",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleExited",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "action": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The action to display."
      },
      "anchorOrigin": {
        "type": {
          "name": "shape",
          "value": {
            "horizontal": {
              "name": "enum",
              "value": [
                {
                  "value": "'left'",
                  "computed": false
                },
                {
                  "value": "'center'",
                  "computed": false
                },
                {
                  "value": "'right'",
                  "computed": false
                }
              ],
              "required": true
            },
            "vertical": {
              "name": "enum",
              "value": [
                {
                  "value": "'top'",
                  "computed": false
                },
                {
                  "value": "'center'",
                  "computed": false
                },
                {
                  "value": "'bottom'",
                  "computed": false
                }
              ],
              "required": true
            }
          }
        },
        "required": false,
        "description": "The anchor of the `Snackbar`.",
        "defaultValue": {
          "value": "{\r\n  vertical: 'bottom',\r\n  horizontal: 'center',\r\n}",
          "computed": false
        }
      },
      "autoHideDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of milliseconds to wait before automatically calling the\r\n`onClose` function. `onClose` should then set the state of the `open`\r\nprop to hide the Snackbar. This behavior is disabled by default with\r\nthe `null` value."
      },
      "children": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "If you wish the take control over the children of the component you can use this property.\r\nWhen used, you replace the `SnackbarContent` component with the children."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "ClickAwayListenerProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `ClickAwayListener` element."
      },
      "ContentProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`SnackbarContent`](/api/snackbar-content/) element."
      },
      "disableWindowBlurListener": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `autoHideDuration` timer will expire even if the window is not focused.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "When displaying multiple consecutive Snackbars from a parent rendering a single\r\n<Snackbar/>, add the key property to ensure independent treatment of each message.\r\ne.g. <Snackbar key={message} />, otherwise, the message may update-in-place and\r\nfeatures such as autoHideDuration may be canceled."
      },
      "message": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The message to display."
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component requests to be closed.\r\nTypically `onClose` is used to set state in the parent component,\r\nwhich is used to control the `Snackbar` `open` prop.\r\nThe `reason` parameter can optionally be used to control the response to `onClose`,\r\nfor example ignoring `clickaway`.\r\n\n@param {object} event The event source of the callback\r\n@param {string} reason Can be:`\"timeout\"` (`autoHideDuration` expired) or: `\"clickaway\"`"
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the transition is entering."
      },
      "onEntered": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the transition has entered."
      },
      "onEntering": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the transition is entering."
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired before the transition is exiting."
      },
      "onExited": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the transition has exited."
      },
      "onExiting": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the transition is exiting."
      },
      "onMouseEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onMouseLeave": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, `Snackbar` is open."
      },
      "resumeHideDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of milliseconds to wait before dismissing after user interaction.\r\nIf `autoHideDuration` property isn't specified, it does nothing.\r\nIf `autoHideDuration` property is specified but `resumeHideDuration` isn't,\r\nwe default to `autoHideDuration / 2` ms."
      },
      "TransitionComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Transition component.",
        "defaultValue": {
          "value": "Slide",
          "computed": true
        }
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\r\nYou may specify a single timeout for all transitions, or individually with an object.",
        "defaultValue": {
          "value": "{\r\n  enter: duration.enteringScreen,\r\n  exit: duration.leavingScreen,\r\n}",
          "computed": false
        }
      },
      "TransitionProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `Transition` element."
      }
    }
  },
  "packages\\material-ui\\src\\SnackbarContent\\SnackbarContent.js": {
    "description": "",
    "displayName": "SnackbarContent",
    "methods": [],
    "props": {
      "action": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The action to display."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "message": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The message to display."
      }
    }
  },
  "packages\\material-ui\\src\\Step\\Step.js": {
    "description": "",
    "displayName": "Step",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Sets the step as active. Is passed to child components.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "alternativeLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\r\nSet internally by Stepper when it's supplied with the alternativeLabel property."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Should be `Step` sub-components such as `StepLabel`, `StepContent`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "completed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Mark the step as completed. Is passed to child components.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "connector": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "@ignore\r\nPassed down from Stepper if alternativeLabel is also set."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Mark the step as disabled, will also disable the button if\r\n`StepButton` is a child of `Step`. Is passed to child components.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "index": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "@ignore\r\nUsed internally for numbering."
      },
      "last": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\StepButton\\StepButton.js": {
    "description": "",
    "displayName": "StepButton",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\r\nPassed in via `Step` - passed through to `StepLabel`."
      },
      "alternativeLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\r\nSet internally by Stepper when it's supplied with the alternativeLabel property."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Can be a `StepLabel` or a node to place inside `StepLabel` as children."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "completed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\r\nSets completed styling. Is passed to StepLabel."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\r\nDisables the button and sets disabled styling. Is passed to StepLabel."
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon displayed by the step label."
      },
      "last": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "optional": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The optional node to display."
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\StepConnector\\StepConnector.js": {
    "description": "",
    "displayName": "StepConnector",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "alternativeLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\r\nSet internally by Step when it's supplied with the alternativeLabel property.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "completed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "index": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "@ignore"
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "'horizontal'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\StepContent\\StepContent.js": {
    "description": "",
    "displayName": "StepContent",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\r\nExpands the content."
      },
      "alternativeLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\r\nSet internally by Step when it's supplied with the alternativeLabel property."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Step content."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "completed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "last": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "optional": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\r\nSet internally by Step when it's supplied with the optional property."
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore"
      },
      "TransitionComponent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Collapse component.",
        "defaultValue": {
          "value": "Collapse",
          "computed": true
        }
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "'auto'",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "Adjust the duration of the content expand transition.\r\nPassed as a property to the transition component.\r\n\nSet to 'auto' to automatically calculate transition time based on height.",
        "defaultValue": {
          "value": "'auto'",
          "computed": false
        }
      },
      "TransitionProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `Transition` element."
      }
    }
  },
  "packages\\material-ui\\src\\StepIcon\\StepIcon.js": {
    "description": "",
    "displayName": "StepIcon",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this step is active.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "completed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Mark the step as completed. Is passed to child components.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Mark the step as failed.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The icon displayed by the step label."
      }
    }
  },
  "packages\\material-ui\\src\\StepLabel\\StepLabel.js": {
    "description": "",
    "displayName": "StepLabel",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\r\nSets the step as active. Is passed to child components.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "alternativeLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\r\nSet internally by Stepper when it's supplied with the alternativeLabel property.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "In most cases will simply be a string containing a title for the label."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "completed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore\r\nMark the step as completed. Is passed to child components.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Mark the step as disabled, will also disable the button if\r\n`StepLabelButton` is a child of `StepLabel`. Is passed to child components.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Mark the step as failed.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Override the default icon."
      },
      "last": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "optional": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The optional node to display."
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "'horizontal'",
          "computed": false
        }
      },
      "StepIconComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component to render in place of the [`StepIcon`](/api/step-icon/)."
      },
      "StepIconProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`StepIcon`](/api/step-icon/) element."
      }
    }
  },
  "packages\\material-ui\\src\\Stepper\\Stepper.js": {
    "description": "",
    "displayName": "Stepper",
    "methods": [],
    "props": {
      "activeStep": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Set the active step (zero based index).",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "alternativeLabel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to 'true' and orientation is horizontal,\r\nthen the step label will be positioned under the icon.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Two or more `<Step />` components."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "connector": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "A component to be placed between each step.",
        "defaultValue": {
          "value": "<StepConnector />",
          "computed": false
        }
      },
      "nonLinear": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set the `Stepper` will not assist in controlling steps for linear flow.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "orientation": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The stepper orientation (layout flow direction).",
        "defaultValue": {
          "value": "'horizontal'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\SvgIcon\\SvgIcon.js": {
    "description": "",
    "displayName": "SvgIcon",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Node passed into the SVG element."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'action'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "'disabled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.\r\nYou can use the `nativeColor` property to apply a color attribute to the SVG element.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'svg'",
          "computed": false
        }
      },
      "fontSize": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "nativeColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Applies a color attribute to the SVG element."
      },
      "titleAccess": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Provides a human-readable title for the element that contains it.\r\nhttps://www.w3.org/TR/SVG-access/#Equivalent"
      },
      "viewBox": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Allows you to redefine what the coordinates without units mean inside an SVG element.\r\nFor example, if the SVG element is 500 (width) by 200 (height),\r\nand you pass viewBox=\"0 0 50 20\",\r\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\r\nto bottom right (50,20) and each unit will be worth 10px.",
        "defaultValue": {
          "value": "'0 0 24 24'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\SwipeableDrawer\\SwipeArea.js": {
    "description": "@ignore - internal component.",
    "displayName": "SwipeArea",
    "methods": [],
    "props": {
      "anchor": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            }
          ]
        },
        "required": true,
        "description": "Side on which to attach the discovery area."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The width of the left most (or right most) area in pixels where the\r\ndrawer can be swiped open from."
      }
    }
  },
  "packages\\material-ui\\src\\SwipeableDrawer\\SwipeableDrawer.js": {
    "description": "",
    "displayName": "SwipeableDrawer",
    "methods": [
      {
        "name": "getDerivedStateFromProps",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "nextProps",
            "type": null
          },
          {
            "name": "prevState",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getMaxTranslate",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getTranslate",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "current",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setPosition",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "translate",
            "type": null
          },
          {
            "name": "options",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleBodyTouchStart",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleBodyTouchMove",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleBodyTouchEnd",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleBackdropRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ref",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handlePaperRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ref",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "listenTouchStart",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "removeTouchStart",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "removeBodyTouchListeners",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "anchor": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      },
      "disableBackdropTransition": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable the backdrop transition.\r\nThis can improve the FPS on low-end devices.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableDiscovery": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\r\nto promote accidental discovery of the swipe gesture.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableSwipeToOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\r\nnavigation actions. Swipe to open is disabled on iOS browsers by default.",
        "defaultValue": {
          "value": "typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)",
          "computed": false
        }
      },
      "hysteresis": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Affects how far the drawer must be opened/closed to change his state.\r\nSpecified as percent (0-1) of the width of the drawer",
        "defaultValue": {
          "value": "0.55",
          "computed": false
        }
      },
      "minFlingVelocity": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Defines, from which (average) velocity on, the swipe is\r\ndefined as complete although hysteresis isn't reached.\r\nGood threshold is between 250 - 1000 px/s",
        "defaultValue": {
          "value": "400",
          "computed": false
        }
      },
      "ModalProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Callback fired when the component requests to be closed.\r\n\n@param {object} event The event source of the callback"
      },
      "onOpen": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Callback fired when the component requests to be opened.\r\n\n@param {object} event The event source of the callback"
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "If `true`, the drawer is open."
      },
      "PaperProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "swipeAreaWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the left most (or right most) area in pixels where the\r\ndrawer can be swiped open from.",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "transitionDuration": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\r\nYou may specify a single timeout for all transitions, or individually with an object.",
        "defaultValue": {
          "value": "{ enter: duration.enteringScreen, exit: duration.leavingScreen }",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'permanent'",
              "computed": false
            },
            {
              "value": "'persistent'",
              "computed": false
            },
            {
              "value": "'temporary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "'temporary'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Switch\\Switch.js": {
    "description": "",
    "displayName": "Switch",
    "methods": [],
    "props": {
      "checked": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "If `true`, the component is checked."
      },
      "checkedIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display when the component is checked."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'secondary'",
          "computed": false
        }
      },
      "defaultChecked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the switch will be disabled."
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple effect will be disabled."
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon to display when the component is unchecked."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element."
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Attributes applied to the `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Use that property to pass a ref callback to the native input component."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the state is changed.\r\n\n@param {object} event The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.checked`.\r\n@param {boolean} checked The `checked` value of the switch"
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The input component property `type`."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value of the component."
      }
    }
  },
  "packages\\material-ui\\src\\Tab\\Tab.js": {
    "description": "",
    "displayName": "Tab",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "checkTextWrap",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "custom",
          "raw": "unsupportedProp"
        },
        "required": false,
        "description": "This property isn't supported.\r\nUse the `component` property if you need to change the children structure."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the tab will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The icon element."
      },
      "indicator": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "@ignore\r\nFor server side rendering consideration, we let the selected tab\r\nrender the indicator."
      },
      "label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The label element."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "textColor": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "You can provide your own value. Otherwise, we fallback to the child position index."
      }
    }
  },
  "packages\\material-ui\\src\\Table\\Table.js": {
    "description": "",
    "displayName": "Table",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the table, normally `TableHeader` and `TableBody`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'table'",
          "computed": false
        }
      },
      "padding": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'checkbox'",
              "computed": false
            },
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Allows TableCells to inherit padding of the Table.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      }
    },
    "childContext": {
      "table": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\TableBody\\TableBody.js": {
    "description": "",
    "displayName": "TableBody",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the component, normally `TableRow`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'tbody'",
          "computed": false
        }
      }
    },
    "childContext": {
      "tablelvl2": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\TableCell\\TableCell.js": {
    "description": "",
    "displayName": "TableCell",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The table cell contents."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component."
      },
      "numeric": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, content will align to the right.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "padding": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'checkbox'",
              "computed": false
            },
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets the padding applied to the cell.\r\nBy default, the Table parent component set the value."
      },
      "scope": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set scope attribute."
      },
      "sortDirection": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'asc'",
              "computed": false
            },
            {
              "value": "'desc'",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set aria-sort direction."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'head'",
              "computed": false
            },
            {
              "value": "'body'",
              "computed": false
            },
            {
              "value": "'footer'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Specify the cell type.\r\nBy default, the TableHead, TableBody or TableFooter parent component set the value."
      }
    },
    "context": {
      "table": {
        "type": {
          "name": "object"
        },
        "required": false
      },
      "tablelvl2": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\TableFooter\\TableFooter.js": {
    "description": "",
    "displayName": "TableFooter",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component, normally `TableRow`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'tfoot'",
          "computed": false
        }
      }
    },
    "childContext": {
      "tablelvl2": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\TableHead\\TableHead.js": {
    "description": "",
    "displayName": "TableHead",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The content of the component, normally `TableRow`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'thead'",
          "computed": false
        }
      }
    },
    "childContext": {
      "tablelvl2": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\TablePagination\\TablePagination.js": {
    "description": "A `TableCell` based component for placing inside `TableFooter` for pagination.",
    "displayName": "TablePagination",
    "methods": [],
    "props": {
      "ActionsComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for displaying the actions.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "TablePaginationActions",
          "computed": true
        }
      },
      "backIconButtonProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the back arrow [`IconButton`](/api/icon-button/) component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "colSpan": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "TableCell",
          "computed": true
        }
      },
      "count": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The total number of rows."
      },
      "labelDisplayedRows": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Customize the displayed rows label.",
        "defaultValue": {
          "value": "({ from, to, count }) => `${from}-${to} of ${count}`",
          "computed": false
        }
      },
      "labelRowsPerPage": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Customize the rows per page label. Invoked with a `{ from, to, count, page }`\r\nobject.",
        "defaultValue": {
          "value": "'Rows per page:'",
          "computed": false
        }
      },
      "nextIconButtonProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the next arrow [`IconButton`](/api/icon-button/) element."
      },
      "onChangePage": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Callback fired when the page is changed.\r\n\n@param {object} event The event source of the callback\r\n@param {number} page The page selected"
      },
      "onChangeRowsPerPage": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the number of rows per page is changed.\r\n\n@param {object} event The event source of the callback"
      },
      "page": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The zero-based index of the current page."
      },
      "rowsPerPage": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The number of rows per page."
      },
      "rowsPerPageOptions": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Customizes the options of the rows per page select field. If less than two options are\r\navailable, no select field will be displayed.",
        "defaultValue": {
          "value": "[5, 10, 25]",
          "computed": false
        }
      },
      "SelectProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the rows per page [`Select`](/api/select/) element."
      }
    }
  },
  "packages\\material-ui\\src\\TablePaginationActions\\TablePaginationActions.js": {
    "description": "@ignore - internal component.",
    "displayName": "TablePaginationActions",
    "methods": [
      {
        "name": "handleBackButtonClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleNextButtonClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "backIconButtonProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the back arrow [`IconButton`](/api/icon-button/) element."
      },
      "count": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The total number of rows."
      },
      "nextIconButtonProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the next arrow [`IconButton`](/api/icon-button/) element."
      },
      "onChangePage": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Callback fired when the page is changed.\r\n\n@param {object} event The event source of the callback\r\n@param {number} page The page selected"
      },
      "page": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The zero-based index of the current page."
      },
      "rowsPerPage": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The number of rows per page."
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      }
    }
  },
  "packages\\material-ui\\src\\TableRow\\TableRow.js": {
    "description": "Will automatically set dynamic row height\r\nbased on the material table element parent (head, body, etc).",
    "displayName": "TableRow",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Should be valid <tr> children such as `TableCell`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'tr'",
          "computed": false
        }
      },
      "hover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the table row will shade on hover.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the table row will have the selected shading.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "context": {
      "tablelvl2": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\TableSortLabel\\TableSortLabel.js": {
    "description": "A button based label for placing inside `TableCell` for column sorting.",
    "displayName": "TableSortLabel",
    "methods": [],
    "props": {
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label will have the active styling (should be true for the sorted column).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Label contents, the arrow will be appended automatically."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'asc'",
              "computed": false
            },
            {
              "value": "'desc'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The current sort direction.",
        "defaultValue": {
          "value": "'desc'",
          "computed": false
        }
      },
      "hideSortIcon": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Hide sort icon when active is false.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "IconComponent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Sort icon to use.",
        "defaultValue": {
          "value": "ArrowDownwardIcon",
          "computed": true
        }
      }
    }
  },
  "packages\\material-ui\\src\\Tabs\\ScrollbarSize.js": {
    "description": "@ignore - internal component.\r\nThe component is originates from https://github.com/STORIS/react-scrollbar-size.\r\nIt has been moved into the core in order to minimize the bundle size.",
    "displayName": "ScrollbarSize",
    "methods": [
      {
        "name": "setMeasurements",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": ""
      },
      "onLoad": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": ""
      }
    }
  },
  "packages\\material-ui\\src\\Tabs\\TabIndicator.js": {
    "description": "@ignore - internal component.",
    "displayName": "TabIndicator",
    "methods": [],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "@ignore\r\nThe color of the tab indicator."
      }
    }
  },
  "packages\\material-ui\\src\\Tabs\\TabScrollButton.js": {
    "description": "@ignore - internal component.",
    "displayName": "TabScrollButton",
    "methods": [],
    "props": {
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Which direction should the button indicate?"
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback to execute for button press."
      },
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should the button be present or just consume space.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Tabs\\Tabs.js": {
    "description": "",
    "displayName": "Tabs",
    "methods": [
      {
        "name": "getConditionalElements",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getTabsMeta",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          },
          {
            "name": "direction",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleLeftScrollClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleRightScrollClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleScrollbarSizeChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ scrollbarHeight }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "moveTabsScroll",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "delta",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "scrollSelectedIntoView",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "scroll",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "updateScrollButtonState",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "updateIndicatorState",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "action": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the component mounts.\r\nThis is useful when you want to trigger an action programmatically.\r\nIt currently only supports `updateIndicator()` action.\r\n\n@param {object} actions This object contains all possible actions\r\nthat can be triggered programmatically."
      },
      "centered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the tabs will be centered.\r\nThis property is intended for large views.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the tabs will grow to use all the available space.\r\nThis property is intended for small views, like on mobile.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "indicatorColor": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determines the color of the indicator.",
        "defaultValue": {
          "value": "'secondary'",
          "computed": false
        }
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the value changes.\r\n\n@param {object} event The event source of the callback\r\n@param {number} value We default to the index of the child"
      },
      "scrollable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "True invokes scrolling properties and allow for horizontally scrolling\r\n(or swiping) the tab bar.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "ScrollButtonComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used to render the scroll buttons.",
        "defaultValue": {
          "value": "TabScrollButton",
          "computed": true
        }
      },
      "scrollButtons": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'auto'",
              "computed": false
            },
            {
              "value": "'on'",
              "computed": false
            },
            {
              "value": "'off'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determine behavior of scroll buttons when tabs are set to scroll\r\n`auto` will only present them on medium and larger viewports\r\n`on` will always present them\r\n`off` will never present them",
        "defaultValue": {
          "value": "'auto'",
          "computed": false
        }
      },
      "TabIndicatorProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `TabIndicator` element."
      },
      "textColor": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determines the color of the `Tab`.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The value of the currently selected `Tab`.\r\nIf you don't want any selected `Tab`, you can set this property to `false`."
      }
    }
  },
  "packages\\material-ui\\src\\TextField\\TextField.js": {
    "description": "The `TextField` is a convenience wrapper for the most common cases (80%).\r\nIt cannot be all things to all people, otherwise the API would grow out of control.\r\n\n## Advanced Configuration\r\n\nIt's important to understand that the text field is a simple abstraction\r\non top of the following components:\r\n- [FormControl](/api/form-control/)\r\n- [InputLabel](/api/input-label/)\r\n- [Input](/api/input/)\r\n- [FormHelperText](/api/form-helper-text/)\r\n\nIf you wish to alter the properties applied to the native input, you can do so as follows:\r\n\n```jsx\r\nconst inputProps = {\r\n  step: 300,\r\n};\r\n\nreturn <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\r\n```\r\n\nFor advanced cases, please look at the source of TextField by clicking on the\r\n\"Edit this page\" button above. Consider either:\r\n- using the upper case props for passing values directly to the components\r\n- using the underlying components directly as shown in the demos",
    "displayName": "TextField",
    "methods": [],
    "props": {
      "autoComplete": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "This property helps users to fill forms faster, especially on mobile devices.\r\nThe name can be confusing, as it's more like an autofill.\r\nYou can learn more about it here:\r\nhttps://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill"
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be focused during the first mount."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "@ignore"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "defaultValue": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The default value of the `Input` element."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be disabled."
      },
      "error": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label will be displayed in an error state."
      },
      "FormHelperTextProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`FormHelperText`](/api/form-helper-text/) element."
      },
      "fullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will take up the full width of its container."
      },
      "helperText": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The helper text content."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element.\r\nUse that property to make `label` and `helperText` accessible for screen readers."
      },
      "InputLabelProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`InputLabel`](/api/input-label/) element."
      },
      "InputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `Input` element."
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Attributes applied to the native `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Use that property to pass a ref callback to the native input component."
      },
      "label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The label content."
      },
      "margin": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'none'",
              "computed": false
            },
            {
              "value": "'dense'",
              "computed": false
            },
            {
              "value": "'normal'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, a textarea element will be rendered instead of an input."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name attribute of the `input` element."
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the value is changed.\r\n\n@param {object} event The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.value`."
      },
      "onFocus": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The short hint displayed in the input before the user enters a value."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the label is displayed as required and the input will be required.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "rows": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Number of rows to display when multiline option is set to true."
      },
      "rowsMax": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Maximum number of rows to display when multiline option is set to true."
      },
      "select": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Render a `Select` element while passing the `Input` element to `Select` as `input` parameter.\r\nIf this option is set you must pass the options of the select as children.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "SelectProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Select`](/api/select/) element."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Type attribute of the `Input` element. It should be a valid HTML5 input type."
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "bool"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  },
                  {
                    "name": "bool"
                  }
                ]
              }
            }
          ]
        },
        "required": false,
        "description": "The value of the `Input` element, required for a controlled component."
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'standard'",
              "computed": false
            },
            {
              "value": "'outlined'",
              "computed": false
            },
            {
              "value": "'filled'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'standard'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Toolbar\\Toolbar.js": {
    "description": "",
    "displayName": "Toolbar",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "disableGutters": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, disables gutter padding.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'regular'",
              "computed": false
            },
            {
              "value": "'dense'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The variant to use.",
        "defaultValue": {
          "value": "'regular'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Tooltip\\Tooltip.js": {
    "description": "",
    "displayName": "Tooltip",
    "methods": [
      {
        "name": "onRootRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ref",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleFocus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleOpen",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleLeave",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleTouchStart",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleTouchEnd",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "element"
        },
        "required": true,
        "description": "Tooltip reference element."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "disableFocusListener": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Do not respond to focus events.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableHoverListener": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Do not respond to hover events.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableTouchListener": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Do not respond to long press touch events.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "enterDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of milliseconds to wait before showing the tooltip.\r\nThis property won't impact the enter touch delay (`enterTouchDelay`).",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "enterTouchDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of milliseconds a user must touch the element before showing the tooltip.",
        "defaultValue": {
          "value": "1000",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The relationship between the tooltip and the wrapper component is not clear from the DOM.\r\nThis property is used with aria-describedby to solve the accessibility issue.\r\nIf you don't provide this property. It fallback to a random generated id."
      },
      "leaveDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of milliseconds to wait before hiding the tooltip.\r\nThis property won't impact the leave touch delay (`leaveTouchDelay`).",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "leaveTouchDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of milliseconds after the user stops touching an element before hiding the tooltip.",
        "defaultValue": {
          "value": "1500",
          "computed": false
        }
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the tooltip requests to be closed.\r\n\n@param {object} event The event source of the callback"
      },
      "onOpen": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the tooltip requests to be open.\r\n\n@param {object} event The event source of the callback"
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the tooltip is shown."
      },
      "placement": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'bottom-end'",
              "computed": false
            },
            {
              "value": "'bottom-start'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'left-end'",
              "computed": false
            },
            {
              "value": "'left-start'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right-end'",
              "computed": false
            },
            {
              "value": "'right-start'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'top-end'",
              "computed": false
            },
            {
              "value": "'top-start'",
              "computed": false
            },
            {
              "value": "'top'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Tooltip placement.",
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        }
      },
      "PopperProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the [`Popper`](/api/popper/) element."
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Tooltip title. Zero-length titles string are never displayed."
      },
      "TransitionComponent": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Transition component.",
        "defaultValue": {
          "value": "Grow",
          "computed": true
        }
      },
      "TransitionProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Properties applied to the `Transition` element."
      }
    }
  },
  "packages\\material-ui\\src\\Typography\\Typography.js": {
    "description": "",
    "displayName": "Typography",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'justify'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Set the text-align on the component.",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content of the component."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "color": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'error'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'secondary'",
              "computed": false
            },
            {
              "value": "'textPrimary'",
              "computed": false
            },
            {
              "value": "'textSecondary'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The color of the component. It supports those theme colors that make sense for this component.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "component": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "The component used for the root node.\r\nEither a string to use a DOM element or a component.\r\nBy default, it maps the variant to a good default headline component."
      },
      "gutterBottom": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the text will have a bottom margin.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "headlineMapping": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "We are empirically mapping the variant property to a range of different DOM element types.\r\nFor instance, subtitle1 to `<h6>`.\r\nIf you wish to change that mapping, you can provide your own.\r\nAlternatively, you can use the `component` property.\r\nThe default mapping is the following:",
        "defaultValue": {
          "value": "{\r\n  h1: 'h1',\r\n  h2: 'h2',\r\n  h3: 'h3',\r\n  h4: 'h4',\r\n  h5: 'h5',\r\n  h6: 'h6',\r\n  subtitle1: 'h6',\r\n  subtitle2: 'h6',\r\n  body1: 'p',\r\n  body2: 'p',\r\n  // deprecated\r\n  display4: 'h1',\r\n  display3: 'h1',\r\n  display2: 'h1',\r\n  display1: 'h1',\r\n  headline: 'h1',\r\n  title: 'h2',\r\n  subheading: 'h3',\r\n}",
          "computed": false
        }
      },
      "internalDeprecatedVariant": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "A deprecated variant is used from an internal component. Users don't need\r\na deprecation warning here if they switched to the v2 theme. They already\r\nget the mapping that will be applied in the next major release.\r\n@internal"
      },
      "noWrap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the text will not wrap, but instead will truncate with an ellipsis.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "paragraph": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the text will have a bottom margin.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "variant": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'h1'",
              "computed": false
            },
            {
              "value": "'h2'",
              "computed": false
            },
            {
              "value": "'h3'",
              "computed": false
            },
            {
              "value": "'h4'",
              "computed": false
            },
            {
              "value": "'h5'",
              "computed": false
            },
            {
              "value": "'h6'",
              "computed": false
            },
            {
              "value": "'subtitle1'",
              "computed": false
            },
            {
              "value": "'subtitle2'",
              "computed": false
            },
            {
              "value": "'body1'",
              "computed": false
            },
            {
              "value": "'body2'",
              "computed": false
            },
            {
              "value": "'caption'",
              "computed": false
            },
            {
              "value": "'button'",
              "computed": false
            },
            {
              "value": "'overline'",
              "computed": false
            },
            {
              "value": "'srOnly'",
              "computed": false
            },
            {
              "value": "'inherit'",
              "computed": false
            },
            {
              "value": "\"display4\"",
              "computed": false
            },
            {
              "value": "'display3'",
              "computed": false
            },
            {
              "value": "'display2'",
              "computed": false
            },
            {
              "value": "'display1'",
              "computed": false
            },
            {
              "value": "'headline'",
              "computed": false
            },
            {
              "value": "'title'",
              "computed": false
            },
            {
              "value": "'subheading'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Applies the theme typography styles.",
        "defaultValue": {
          "value": "'body1'",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\Zoom\\Zoom.js": {
    "description": "The Zoom transition can be used for the floating variant of the\r\n[Button](https://material-ui.com/demos/buttons/#floating-action-buttons) component.\r\nIt uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.",
    "displayName": "Zoom",
    "methods": [
      {
        "name": "handleEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleExit",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "element"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "A single child content element."
      },
      "in": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the component will transition in."
      },
      "onEnter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onExit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "@ignore"
      },
      "theme": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "@ignore"
      },
      "timeout": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "shape",
              "value": {
                "enter": {
                  "name": "number",
                  "required": false
                },
                "exit": {
                  "name": "number",
                  "required": false
                }
              }
            }
          ]
        },
        "required": false,
        "description": "The duration for the transition, in milliseconds.\r\nYou may specify a single timeout for all transitions, or individually with an object.",
        "defaultValue": {
          "value": "{\r\n  enter: duration.enteringScreen,\r\n  exit: duration.leavingScreen,\r\n}",
          "computed": false
        }
      }
    }
  },
  "packages\\material-ui\\src\\internal\\SwitchBase.js": {
    "description": "@ignore - internal component.",
    "displayName": "SwitchBase",
    "methods": [
      {
        "name": "handleFocus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleBlur",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleInputChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be focused during the first mount."
      },
      "checked": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "If `true`, the component is checked."
      },
      "checkedIcon": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The icon to display when the component is checked."
      },
      "classes": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "Override or extend the styles applied to the component.\r\nSee [CSS API](#css-api) below for more details."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "@ignore"
      },
      "defaultChecked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "@ignore"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the switch will be disabled."
      },
      "disableRipple": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the ripple effect will be disabled."
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The icon to display when the component is unchecked."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The id of the `input` element."
      },
      "inputProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Attributes applied to the `input` element."
      },
      "inputRef": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "func"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "Use that property to pass a ref callback to the native input component."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the state is changed.\r\n\n@param {object} event The event source of the callback.\r\nYou can pull out the new value by accessing `event.target.checked`.\r\n@param {boolean} checked The `checked` value of the switch"
      },
      "onFocus": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "@ignore"
      },
      "readOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "It prevents the user from changing the value of the field\r\n(not from interacting with the field)."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the input will be required."
      },
      "tabIndex": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "@ignore"
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The input component property `type`."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value of the component."
      }
    },
    "context": {
      "muiFormControl": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "packages\\material-ui\\src\\styles\\MuiThemeProvider.js": {
    "description": "This component takes a `theme` property.\r\nIt makes the `theme` available down the React tree thanks to React context.\r\nThis component should preferably be used at **the root of your component tree**.",
    "displayName": "MuiThemeProvider",
    "methods": [
      {
        "name": "mergeOuterLocalTheme",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "localTheme",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "You can wrap a node."
      },
      "disableStylesGeneration": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "You can disable the generation of the styles with this option.\r\nIt can be useful when traversing the React tree outside of the HTML\r\nrendering step on the server.\r\nLet's say you are using react-apollo to extract all\r\nthe queries made by the interface server side.\r\nYou can significantly speed up the traversal with this property."
      },
      "sheetsManager": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The sheetsManager is used to deduplicate style sheet injection in the page.\r\nIt's deduplicating using the (theme, styles) couple.\r\nOn the server, you should provide a new instance for each request."
      },
      "theme": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": true,
        "description": "A theme object."
      }
    },
    "context": {
      "muiThemeProviderOptions": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    },
    "childContext": {
      "muiThemeProviderOptions": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  }
}
